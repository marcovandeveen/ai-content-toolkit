openapi: 3.1.0
servers:
  - url: 'https://api.jwplayer.com'
info:
  version: '0.2'
  title: JW Platform Management API v2
  description: Customer-facing management API. This file only includes documented routes.
security:
  - v2ApiSecret: []
x-explorer-enabled: true
x-proxy-enabled: true
x-samples-enabled: true
x-samples-languages: ['python', 'node', 'ruby', 'php', 'go', 'java', 'csharp']

paths:
  /v2/sites/{site_id}/advertising/player_bidding_configs/:
    get:
      summary: List player bidding configurations
      description: List player bidding configurations
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `id:+bIAkzJDs`

            Player bidding configs can be queried by the following attributes:
              - `id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Player bidding configs can only be sorted by `created:dsc`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      tags:
        - advertising
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PbConfigResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a player bidding configuration
      description: Create a player bidding configuration resource. Currently only one configuration is allowed.
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/PbConfigResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PbConfigResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '422':
          $ref: '#/components/responses/422'
  /v2/sites/{site_id}/advertising/player_bidding_configs/{config_id}/:
    get:
      summary: Get a player bidding configuration
      description: Get a player bidding configuration
      tags:
        - advertising
      parameters:
        - in: path
          name: config_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PbConfigResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a player bidding configuration
      description: Update a player bidding configuration
      tags:
        - advertising
      parameters:
        - in: path
          name: config_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/PbConfigResourceWrite'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PbConfigResourceRead'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a player bidding configuration
      description: Delete a player bidding configuration
      tags:
        - advertising
      parameters:
        - in: path
          name: config_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/advertising/update_schedules_player_bidding_configs/:
    put:
      summary: Update ad schedules with the player bidding configuration
      description: Update ad schedules with the player bidding configuration
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/UpdateSchedulePbBody'
      responses:
        '204':
          description: Request successful
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/advertising/schedules/:
    get:
      summary: List advertising schedules
      description: List advertising schedules
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `id:+bIAkzJDs`

            Advertising schedules can be queried by the following attributes:
              - `id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Advertising schedules can be sorted by the following attributes:
              - `client`
              - `created`
              - `last_modified`
              - `name`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdScheduleResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create an advertising schedule
      description: Create an advertising schedule
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/AdScheduleResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdScheduleResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/advertising/schedules/{ad_schedule_id}/:
    get:
      summary: Get an advertising schedule
      description: Get an advertising schedule
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/adScheduleId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdScheduleResourceRead'
        '404':
          $ref: '#/components/responses/400'
    patch:
      summary: Update an advertising schedule
      description: Update an advertising schedule
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/adScheduleId'
      requestBody:
        $ref: '#/components/requestBodies/AdScheduleResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdScheduleResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete an advertising schedule
      description: Delete an advertising schedule
      tags:
        - advertising
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/adScheduleId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/analytics/queries/:
    post:
      summary: Fetches an analytics report over a custom date range
      description: Fetches an analytics report over a custom date range
      parameters:
        - $ref: '#/components/parameters/siteId'
        - name: source
          description: |
            Data set against which to run the request query

            The `default` option includes <a href="https://docs.jwplayer.com/platform/docs/analytics-metrics-and-dimensions" target="_blank">all JW Player data</a>, excluding OTT data.

            The `ott` option (OTT data) includes the following subset of dimensions and metrics:

            **DIMENSIONS**
            - country_code
            - custom_parameter_name
            - custom_parameter_value
            - eastern_date
            - media_id
            - platform_id
            - playlist_id
            - playlist_type
            - tag
            - upload_date
            - video_duration

            **METRICS**
            - ad_impressions
            - ads_per_viewer
            - completes
            - complete_rate
            - logged_in_unique_viewers
            - plays
            - plays_per_viewer
            - time_watched
            - time_watched_per_viewer
            - unique_viewers
          in: query
          required: false
          schema:
            type: string
            default: default
            enum:
              - default
              - ott
        - name: format
          description: File type of the response query output
          in: query
          required: false
          schema:
            type: string
            default: json
            enum:
              - json
              - csv
      tags:
        - analytics
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ReportQueryRequest'
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportQueryResponse'
  /v2/sites/{site_id}/app_configs/:
    get:
      summary: List app configs
      description: >
        List all app configs for a site
      tags:
        - app configs
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: >
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)
            Example: `app_name:+a title`
            App configs can be queried by the following attributes:
              - `app_name`
              - `id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: >
            Allows for sorting results
            Example: `sort=created:dsc`
            Sort order can be one of `asc`, `dsc`
            App configs can be sorted by the following attributes:
              - `app_name`
              - `created`
              - `last_modified`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppConfigResourcesRead"
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create an app config
      description: >
        Create a new app config for a site
      tags:
        - app configs
      parameters:
        - $ref: "#/components/parameters/siteId"
      requestBody:
        $ref: "#/components/requestBodies/AppConfigResourceWrite"
      responses:
        '201':
          description: App config created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppConfigResourceRead"
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v2/sites/{site_id}/app_configs/{app_config_id}/:
    get:
      summary: Get an app config
      description: >
        Retrieve the details of a specific app config
      tags:
        - app configs
      parameters:
        -   $ref: "#/components/parameters/siteId"
        -   $ref: "#/components/parameters/appConfigId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppConfigResourceRead"
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete an app config
      description: >
        Delete a specific app config
      tags:
        - app configs
      parameters:
        -   $ref: "#/components/parameters/siteId"
        -   $ref: "#/components/parameters/appConfigId"
      responses:
        "204":
          description: Success
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update an app config
      description: >
        Update a specific app config
      tags:
        - app configs
      parameters:
        - $ref: '#/components/parameters/dryRunHeader'
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/appConfigId"
      requestBody:
        $ref: "#/components/requestBodies/AppConfigResourceWrite"
      responses:
        '200':
          description: Successfully updated app config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppConfigResourceRead"
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Broadcast Live
  /v2/sites/{site_id}/live/broadcast/streams/:
    post:
      tags:
        - broadcast live
      summary: Create a live stream
      description: |
        Create a new live stream

        For more product information, see [Get started with Broadcast Live](https://docs.jwplayer.com/platform/docs/broadcast-live-get-started-with-broadcast-live).
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        description: The request parameters for a new live stream.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamRequestParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamObjectSchema'
        '422':
          description: Unprocessable Filter Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          $ref: '#/components/responses/400'
    get:
      tags:
        - broadcast live
      summary: List Broadcast Live streams
      description: List all Broadcast Live streams for a site
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          in: query
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Live streams can be queried by the following attributes:
              - `created`
              - `id`
              - `last_modified`
              - `playout_availability`
              - `status`
              - `stream_start`
              - `title`
          schema:
            type: string
        - name: sort
          in: query
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Live streams can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `playout_availability`
              - `status`
              - `stream_start`
              - `title`
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamCollectionSchema'
        '422':
          description: Unprocessable Filter Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/start/:
    put:
      tags:
        - broadcast live
      summary: Start a live stream
      description: |
        Start a live stream
        
        The request is always accepted, but only executed when the live stream is in a state that can be started.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/go_live/:
    put:
      tags:
        - broadcast live
      summary: Start a live stream
      description: |
        Make a live stream available
        
        The request is always accepted, but only executed when the live stream is in a state that can be made available.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/stop/:
    put:
      tags:
        - broadcast live
      summary: Stop a live stream
      description: |
        Stop a live stream
        
        The request is always accepted but only executed when the live stream is in a state that can be stopped.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/destroy/:
    put:
      tags:
        - broadcast live
      summary: Destroy a live stream
      description: |
        Remove the stream infrastructure and delete the live stream
        
        The system stops any ongoing processes and tears down the infrastructure.
        
        For the duration of the process, the live stream will be in a `Destroying` state. This process can take up to 15 minutes to complete. At the end of the process, the live stream will be deleted.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/set_ingest/:
    put:
      tags:
        - broadcast live
      summary: Assign a live ingest point
      description: |
        Assign a live ingest point to a live stream

        To replace or update the live ingest point, the existing one must be removed before assigning a new one. The request is rejected if the live stream already has a live ingest point assigned to it.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamAddIngestParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamObjectSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'  
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/remove_ingest/:
    put:
      tags:
        - broadcast live
      summary: Unassign a live ingest point
      description: |
        Unassign a live ingest point from a live stream
        
        The request is rejected if the live stream does not have a live ingest point assigned to it.
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamAddIngestParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamObjectSchema'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'           
  /v2/sites/{site_id}/live/broadcast/streams/{stream_id}/:
    patch:
      tags:
        - broadcast live
      summary: Update properties of a live stream
      description: |
        Update a selection of live stream properties
      parameters:
        - $ref: '#/components/parameters/streamId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamUpdateParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamObjectSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    get:
      tags:
        - broadcast live
      summary: Get a live stream
      description: Retrieve the details of a specific live stream
      parameters:
        - name: stream_id
          in: path
          description: Unique alphanumeric ID of the live stream
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamObjectSchema'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/live/broadcast/streams/{media_id}/clip/:
    put:
      tags:
        - broadcast live
      summary: Create a clip
      description: |
        Create a new media object that is a subsection of an existing media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        description: Parameters for specifying a new clip.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClipParameters'
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/sites/{site_id}/live/broadcast/stream_configs/:
    get:
      tags:
        - broadcast live
      summary: List Broadcast stream configs
      description: List all Broadcast stream configs for a site
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          in: query
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Stream configs can be queried by the following attributes:
              - `created`
              - `id`
              - `last_modified`
          schema:
            type: string
        - name: sort
          in: query
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Stream configs can be sorted by the following attributes:
              - `created`
              - `last_modified`
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamConfigCollectionSchema'
        '422':
          description: Unprocessable Filter Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/sites/{site_id}/live/broadcast/stream_configs/{config_id}/:
    get:
      tags:
        - broadcast live
      summary: Get a stream config
      description: Retrieve the details of a specific stream config
      parameters:
        - name: config_id
          in: path
          description: Unique alphanumeric ID of the stream config
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamConfigObjectSchema'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/live/broadcast/stream_configs/default/:
    get:
      tags:
        - broadcast live
      summary: Get the default stream config for a site
      description: |
        Retrieve the details of a default stream config

        A single default config can exist per site and is not returned in other queries.
      parameters:
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamConfigObjectSchema'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/live/broadcast/ingest/:
    get:
      tags:
        - broadcast live
      summary: List Broadcast Live ingest points
      description: List all Broadcast Live ingest points for a site
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          in: query
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Live ingest points can be queried by the following attributes:
              - `created`
              - `last_modified`
              - `id`
              - `display_name`
              - `ingest_format`
          schema:
            type: string
        - name: sort
          in: query
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Live ingest points can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `display_name`
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveIngestCollectionSchema'
        '422':
          description: Unprocessable Filter Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - broadcast live
      summary: Create a live ingest point
      description: |
        Create a new live ingest point

        For more product information, see [Get started with Broadcast Live](https://docs.jwplayer.com/platform/docs/broadcast-live-get-started-with-broadcast-live).
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        description: The request parameters for a new live ingest point.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIngestPointParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveIngestObjectSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/live/broadcast/ingest/availability/:
    get:
      tags:
        - broadcast live
      summary: List ingest point availability
      description: List the availabilities of Broadcast Live ingest points for a specific format between two dates
      parameters:
        - $ref: '#/components/parameters/siteId'
        - name: ingest_format
          in: query
          description: Live ingest format
          required: true
          schema:
            type: string 
            enum:
              - srt
              - rtmp
        - name: start_date
          description: |
            First date and time of the availability date range in ISO 8601 format

            **Default**: current date and time (UTC)
          in: query
          schema:
            type: string
            format: date-time
            example: '2018-10-02T21:19:36.602019+00:00'
        - name: end_date
          description: | 
            Last date and time of the availability date range in ISO 8601 format

            **Default**: maximum date and time (31/12/9999 23:59:59)
          in: query
          schema:
            type: string
            format: date-time
            example: '2018-10-02T21:19:36.602019+00:00'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveIngestAvailabilityCollectionSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'          
  /v2/sites/{site_id}/live/broadcast/ingest/{ingest_id}/:
    get:
      tags:
        - broadcast live
      summary: Get a live ingest point
      description: Retrieve the details of a specific live ingest point
      parameters:
        - name: ingest_id
          in: path
          description: Unique alphanumeric ID of the live ingest point
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveIngestObjectSchema'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - broadcast live
      summary: Delete a live ingest point
      description: Deletes a specific live ingest point if not in use or scheduled to be used
      parameters:
        - name: ingest_id
          in: path
          description: Unique alphanumeric ID of the live ingest point
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Success
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - broadcast live
      summary: Update the display name of a live ingest point
      description: Update the display name of a specific live ingest point
      parameters:
        - name: ingest_id
          in: path
          description: Unique alphanumeric ID of the live ingest point
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestRenameParameters'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveIngestObjectSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/live/broadcast/ingest/{ingest_id}/streams/:
    get:
      tags:
        - broadcast live
      summary: List streams for an ingest point
      description: List all Broadcast Live streams for a live ingest point
      parameters:
        - name: ingest_id
          in: path
          description: Unique alphanumeric ID of the live ingest point
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageLengthParam'
        - name: q
          in: query
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Live streams can be queried by the following attributes:
              - `created`
              - `id`
              - `last_modified`
              - `status`
              - `stream_start`
              - `title`
          schema:
            type: string
        - name: sort
          in: query
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Live streams can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `status`
              - `stream_start`
              - `title`
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveStreamCollectionSchema'
        '422':
          description: Unprocessable Filter Parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: A lower level service failed to process request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # END Broadcast Live
  /v2/sites/{site_id}/content_type_schemas/:
    get:
      summary: List schemas
      description: |
        List all content type schemas for a site

        Content types streamline the tasks of content editors, like managing media metadata, by automatically displaying the necessary fields in the JWP dashboard. This applies to various content types such as concerts, teams, matches, venues, and more.
      tags:
        - content type schemas
      parameters:
        - $ref: "#/components/parameters/siteId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTypeSchemaResourcesRead"
    post:
      summary: Create schema
      description: >
        Create a new schema for a site
      tags:
        - content type schemas
      parameters:
        - $ref: "#/components/parameters/siteId"
      requestBody:
        $ref: "#/components/requestBodies/ContentTypeSchemaResourceWrite"
      responses:
        "201":
          description: Request to create schema successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTypeSchemaResourceRead"
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v2/sites/{site_id}/content_type_schemas/{schema_id}/:
    delete:
      summary: Delete a schema
      description: >
        Delete a specific schema
      tags:
        - content type schemas
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/schemaId"
      responses:
        '204':
          description: Schema successfully deleted
    get:
      summary: Get a schema
      description: >
        Retrieve the details of a specific schema
      tags:
        - content type schemas
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/schemaId"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTypeSchemaResourceRead"
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update a schema
      description: >
        Update a specific schema
      tags:
        - content type schemas
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/schemaId"
      requestBody:
        $ref: "#/components/requestBodies/ContentTypeSchemaResourceWrite"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentTypeSchemaResourceRead"
  /v2/sites/{site_id}/drm_policies/:
    post:
      summary: Creates a DRM policy
      description: Creates a DRM policy for a site
      tags:
        - drm
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/DRMPolicyResourceWrite'
      responses:
        '200':
          description: DRM policy created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRMPolicyResourceRead'
        '400':
          $ref: '#/components/responses/400'
    get:
      summary: List DRM policies
      description: Lists DRM policies for a site
      tags:
       - drm
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
      responses:
        '200':
          description: Site DRM policy resources retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRMPolicyResourcesRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/drm_policies/{policy_id}/:
    get:
      summary: Get a DRM policy
      description: Fetches DRM policy details
      tags:
        - drm
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/policyId'
      responses:
        '200':
          description: Policy successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRMPolicyResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a DRM policy
      description: Update properties of a DRM policy
      tags:
        - drm
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/policyId'
      requestBody:
        $ref: '#/components/requestBodies/DRMPolicyResourceWrite'
      responses:
        '200':
          description: Policy successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DRMPolicyResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a DRM policy
      description: Delete a given DRM policy
      tags:
       - drm
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/policyId'
      responses:
        '204':
          description: Successful delete
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/images/:
    post:
      summary: Create an additional image for media
      description: >
        Before you can upload a new image, you need to create a new image first.
        This endpoint allows you to create a new image resource. In the response, you'll
        receive `upload_link` or `upload_id` and `upload_token` depending on the `upload.method`
        provided.

        **NOTE:** If the site already has 40 unique labels, a request to create an image
        with a new label will be rejected.
      tags:
        - image
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
      requestBody:
        $ref: "#/components/requestBodies/ImageCreateResourceWrite"
      responses:
        '201':
          description: Request to add image successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageCreateResourceRead"
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: List additional images for media
      description: >
        Get a list of all images for this media
      tags:
        - image
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResourcesRead"
        default:
          description: API error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v2/sites/{site_id}/media/{media_id}/images/{image_id}/:
    get:
      summary: Get an additional image
      description: >
        Request details for an image resource with a specific image ID
      tags:
        - image
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/imageId"
      responses:
        '200':
          description: Successfully retrieved image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResourceRead"
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update an additional image
      description: >
        Update an image resource with a specific image ID
      tags:
        - image
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/imageId"
      requestBody:
        $ref: "#/components/requestBodies/ImageUpdateResourceWrite"
      responses:
        '200':
          description: Successfully updated image
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageResourceRead"
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete an additional image
      description: >
        Delete an image resource with a specific image ID
      tags:
        - image
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/imageId"
      responses:
        '204':
          $ref: '#/components/responses/204'
        default:
          description: API Error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v2/sites/{site_id}/imports/:
    get:
      summary: List imports
      description: List MRSS import sources
      tags:
        - imports
      parameters:
        - $ref: '#/components/parameters/siteId'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `title:+a title`

            Imports can be queried by the following attributes:
              - `title`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Imports can be sorted by the following attributes:
              - `created`
              - `last_import_date`
              - `state`
              - `title`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc`
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create an import
      description: |
        Creates an import source to this site

        Learn more about how to [set up an MRSS import feed](https://developer.jwplayer.com/jwplayer/docs/stream-set-up-an-mrss-import-feed )
      tags:
        - imports
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/ImportResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/imports/{import_id}/:
    get:
      summary: Get an import
      description: Get MRSS import source
      tags:
        - imports
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/importId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResourceRead'
        '404':
          $ref: '#/components/responses/404'
        '400':
          $ref: '#/components/responses/400'
    patch:
      summary: Update an import
      description: Update MRSS import source
      tags:
        - imports
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/importId'
      requestBody:
        $ref: '#/components/requestBodies/ImportResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResourceRead'
        '404':
          $ref: '#/components/responses/404'
        '400':
          $ref: '#/components/responses/400'
    delete:
      summary: Delete an import
      description: Delete MRSS import source
      tags:
        - imports
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/importId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/channels/:
    get:
      summary: List live channels
      description: Get a list of all live channels
      tags:
        - live channels
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `title:+a title`

            Live channels can be queried by the following attributes:
              - `created`
              - `last_modified`
              - `status`
              - `title`
              - `id`
              - `tags`
              - `latency`
              - `publishing_mode`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Live channels can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `status`
              - `title`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a live channel
      description: Create a live channel
      tags:
        - live channels
      parameters:
        - $ref: '#/components/parameters/dryRunHeader'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/LiveChannelResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/channels/{channel_id}/:
    get:
      summary: Get a live channel
      description: Get a live channel
      tags:
        - live channels
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelResourceRead'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a live channel
      description: Delete a live channel
      tags:
        - live channels
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    patch:
      summary: Update a live channel
      description: Updates live channel metadata and settings, such as the content protection rule, DVR, latency, publishing mode, reconnect window, simulcast targets, and text tracks (captions, subtitles) 
      tags:
        - live channels
      parameters:
        - $ref: '#/components/parameters/dryRunHeader'
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
      requestBody:
          $ref: '#/components/requestBodies/LiveChannelResourceUpdate'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelResourceRead'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/channels/{channel_id}/disable/:
    put:
      summary: Disable the channel
      description: >
        Disables the channel and makes it unavailable for ingest and playback.
      tags:
        - live channels
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/channelId"
      responses:
        "204":
          description: The channel has been successfully disabled.
        '404':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/channels/{channel_id}/enable/:
    put:
      summary: Enable the channel
      description: >
        Enables the channels and makes it available for ingest and playback.
      tags:
        - live channels
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/channelId"
      responses:
        "204":
          description: The channel has been successfully enabled.
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/channels/{channel_id}/events/:
    get:
      summary: List live events
      description: Get a list of events that belong to a live channel
      tags:
        - live events
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `title:+a title`

            Live events can be queried by the following attributes:
              - `created`
              - `last_modified`
              - `status`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Live events can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `status`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelEventResourcesRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/channels/{channel_id}/events/{event_id}/:
    get:
      summary: Get a live event
      description: Get details for an event of a live channel
      tags:
        - live events
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/eventId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelEventResourceRead'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/channels/{channel_id}/events/{event_id}/clip/:
    put:
      summary: Create a VOD asset by clipping an event
      description: >
        Create a video on demand (VOD) asset by clipping the event with `event_id`. The beginning and
        end times of the clip must be specified in the payload. The new VOD asset inherits tags
        and custom parameters from the channel.
      tags:
        - live events
      parameters:
        - $ref: '#/components/parameters/dryRunHeader'
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/channelId'
        - $ref: '#/components/parameters/eventId'
      requestBody:
        $ref: '#/components/requestBodies/LiveChannelEventClipWrite'
      responses:
        '201':
          description: Clip request for VOD asset was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveChannelEventClipResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/channels/{channel_id}/events/{event_id}/publish/:
    put:
      summary: Publish the event
      description: >
        Publish the event to the end-users.
      tags:
        - live events
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/channelId"
        - $ref: "#/components/parameters/eventId"
      responses:
        '204':
          description: Publishing of the event was succesful.
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/media/:
    get:
      summary: List media
      description: List media
      tags:
      - media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `title:+a title`

            Media can be queried by the following attributes:
              - `author`
              - `category`
              - `created`
              - `custom_params`
              - `description`
              - `error_message`
              - `external_id`
              - `duration`
              - `hosting_type`
              - `id`
              - `last_modified`
              - `media_type`
              - `permalink`
              - `protection_rule_key`
              - `publish_end_date`
              - `publish_start_date`
              - `source_format`
              - `source_url`
              - `status`
              - `tags`
              - `title`
              - `trim_in_point`
              - `trim_out_point`

            Querying for a specific `custom_params` requires a match using the `AND` logical operator:
            
            `custom_params: ( name: "abc" AND value: "123" )`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Media can be sorted by the following attributes:
              - `created`
              - `duration`
              - `last_modified`
              - `publish_end_date`
              - `publish_start_date`
              - `status`
              - `title`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a media
      description: Create a media
      tags:
      - media
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/MediaResourceWriteCreate'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResourceReadCreate'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/media/{media_id}/:
    get:
      summary: Get a media
      description: Get a media
      tags:
      - media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a media
      description: Update a media
      tags:
      - media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        $ref: '#/components/requestBodies/MediaResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a media
      description: Deletes the media for the given ID
      tags:
        - media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/reupload/:
    put:
      summary: Reupload a media
      description: Initiates a reupload of a media allowing the file or URL to be replaced.  Reuploads might affect audio and text tracks associated with a media. [Learn more here](https://docs.jwplayer.com/platform/docs/vdh-replace-or-update-an-existing-upload)
      tags:
      - media
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        $ref: '#/components/requestBodies/MediaReuploadBody'
      responses:
        '200':
          description: Media reupload successfully initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media_protection_rules/:
    get:
      summary: List media protection rules
      description: List media protection rules
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageLengthParam'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `name:+my rule`

            Media protection rules can be queried by the following attributes:
              - `countries`
              - `id`
              - `name`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Media protection rules can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `name`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      tags:
        - media protection rules
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProtectionRuleResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a media protection rule
      description: Create a media protection rule
      tags:
        - media protection rules
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/MediaProtectionRuleResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProtectionRuleResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/media_protection_rules/{protection_rule_id}/:
    get:
      summary: Get a media protection rule
      description: Get a media protection rule
      tags:
        - media protection rules
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/protectionruleId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProtectionRuleResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a media protection rule
      description: Update a media protection rule
      tags:
        - media protection rules
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/protectionruleId'
      requestBody:
          $ref: '#/components/requestBodies/MediaProtectionRuleResourceUpdate'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaProtectionRuleResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a media protection rule
      description: Delete a media protection rule
      tags:
        - media protection rules
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/protectionruleId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/media_renditions/:
    get:
      summary: List media renditions
      tags:
        - media renditions
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `id:+zKqzcasd`

            Media renditions can be queried by the following attributes:
             - `id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Media renditions can be sorted by the following attributes:
              - `created`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRenditionResourcesRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    post:
      summary: Create a media rendition
      tags:
        - media renditions
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        $ref: '#/components/requestBodies/MediaRenditionResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRenditionResource'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/media/{media_id}/media_renditions/{rendition_id}/:
    get:
      summary: Get a media rendition
      tags:
        - media renditions
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/mediaRenditionId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaRenditionResource'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a media rendition
      tags:
        - media renditions
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/mediaRenditionId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/originals/:
    get:
      summary: List originals
      description: |
          Retrieves a list of resources that represent the uploaded files that make up a hosted media

          These may be primary (for example a video file or the main audio file) or secondary (for example an additional audio track).
      tags:
        - originals
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
      responses:
        '200':
          description: Original successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginalResourcesRead'
        '404':
          $ref: '#/components/responses/404'
    post:
      summary: Create an original
      description: |
          Creates an original resource for an additional file for the media, such as [alternate audio tracks](https://developer.jwplayer.com/jwplayer/docs/stream-manage-alternate-audio-tracks)
      tags:
        - originals
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
        $ref: '#/components/requestBodies/OriginalResourceCreate'
      responses:
        '201':
          description: Object successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginalResourceReadCreate'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '412':
          $ref: '#/components/responses/412'
  /v2/sites/{site_id}/media/{media_id}/originals/{original_id}/:
    get:
      summary: Get an original
      description: |
          Retrieves an original resource, which represents the primary or secondary files of a hosted media, by ID
      tags:
        - originals
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
      responses:
        '200':
          description: Original successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginalResourceRead'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete an original
      description: |
          Deletes an original resource ID

          Tracks corresponding to a deleted original will no longer be included for playback. 
          
          Only secondary originals can be deleted. Secondary originals are used for [alternate audio tracks](https://docs.jwplayer.com/platform/docs/vdh-add-alternate-audio-tracks) and have `original_type` set to `secondary`.
      tags:
        - originals
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/originals/{original_id}/audio_tracks/:
    get:
      summary: List audio tracks
      description: |
          Retrieves a list of audio tracks associated with the original
      tags:
        - audio tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTrackResourcesRead'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/originals/{original_id}/audio_tracks/{audio_track_id}/:
    get:
      summary: Get an audio track
      description: |
          Retrieves the details of a specific audio track
      tags:
        - audio tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
        - $ref: '#/components/parameters/audioTrackId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTrackResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update an audio track
      description: |
          Updates the metadata of a specific audio track resource
      tags:
        - audio tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
        - $ref: '#/components/parameters/audioTrackId'
      requestBody:
        $ref: '#/components/requestBodies/AudioTrackResourceUpdate'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioTrackResourceRead'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete an audio track
      description: |
          Deletes a specific audio track resource

          Deleted audio tracks are **permanently removed** and will not be available for playback.
          
          **NOTE**: Default audio tracks **cannot** be deleted.
      tags:
        - audio tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/originalId'
        - $ref: '#/components/parameters/audioTrackId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/placements/:
    get:
      summary: List strategy rules placements
      description: List strategy rules placements for a site
      tags:
        - placements
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `name:+a placement`

            Placements can be queried by the following attributes:
              - `enabled`
              - `id`
              - `is_deliverable`
              - `name`
              - `strategy_id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Placements can be sorted by the following attributes:
              - `created`
              - `enabled`
              - `is_deliverable`
              - `last_modified`
              - `name`
              - `strategy_id`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlacementResourcesRead'
    post:
      summary: Create a strategy rules placement
      description: Create a strategy rules placement
      tags:
        - placements
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/PlacementResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlacementResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/placements/{placement_id}/:
    get:
      summary: Get a strategy rules placement
      description: Retrieve the details of a specific strategy rules placement
      tags:
        - placements
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/placementId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlacementResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a strategy rules placement
      description: Update a specific strategy rules placement
      tags:
        - placements
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/placementId'
      requestBody:
        $ref: '#/components/requestBodies/PlacementResourceUpdate'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlacementResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a strategy rules placement
      description: Delete a specific strategy rules placement
      tags:
        - placements
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/placementId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/players/:
    get:
      summary: List players
      description: List players
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageLengthParam'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `name:+testplayer`

            Players can be queried by the following attributes:
              - `custom_params`
              - `id`
              - `name`
              - `release_channel`

            Querying for a specific `custom_params` requires a match using the `AND` logical operator:
            
            `custom_params: ( name: "abc" AND value: "123" )`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Players can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `name`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a player
      description: Create a player
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/PlayerResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/players/{player_id}/:
    get:
      summary: Get a player
      description: Get a player
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playerId'
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a player
      description: Update a player
      tags:
      - players
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playerId'
      requestBody:
        $ref: '#/components/requestBodies/PlayerResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a player
      description: Delete a player
      tags:
       - players
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playerId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/players/logo/:
    post:
      summary: Upload a player logo
      description: Upload a player logo
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/PlayerLogoResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerLogoResourceRead'
        '404':
          $ref: '#/components/responses/404'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/players/logo/{logo_id}/:
    get:
      summary: Get player logo
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/logoId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerLogoResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/:
    get:
      summary: List playlists
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageLengthParam'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `title:+a title`

            Playlists can be queried by the following attributes:
              - `author`
              - `custom_params.name`
              - `custom_params.value`
              - `description`
              - `id`
              - `link`
              - `playlist_type`
              - `title`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Playlists can be sorted by the following attributes:
              - `created`
              - `last_modified`
              - `playlist_type`
              - `title`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistResourcesRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/{playlist_id}/:
    get:
      summary: Get a playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a playlist
      tags:
       - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
  /v2/sites/{site_id}/playlists/manual_playlist/:
    post:
      summary: Create a manual playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/ManualPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/manual_playlist/:
    get:
      summary: Get a manual playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a manual playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/ManualPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a manual playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/dynamic_playlist/:
    post:
      summary: Create a dynamic playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/DynamicPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/dynamic_playlist/:
    get:
      summary: Get a dynamic playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a dynamic playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/DynamicPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a dynamic playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/article_matching_playlist/:
    post:
      summary: Create an article matching playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/ArticleMatchingPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleMatchingPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/article_matching_playlist/:
    get:
      summary: Get an article matching playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleMatchingPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update an article matching playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/ArticleMatchingPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleMatchingPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete an article matching playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/search_playlist/:
    post:
      summary: Create a search playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/SearchPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/search_playlist/:
    get:
      summary: Get a search playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a search playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/SearchPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a search playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/recommendations_playlist/:
    post:
      summary: Create a recommendations playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/RecommendationsPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/recommendations_playlist/:
    get:
      summary: Get a recommendations playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a recommendations playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/RecommendationsPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a recommendations playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/playlists/watchlist_playlist/:
    post:
      summary: Create a watchlist playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/WatchlistPlaylistResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/playlists/{playlist_id}/watchlist_playlist/:
    get:
      summary: Get a watchlist playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistPlaylistResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a watchlist playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        $ref: '#/components/requestBodies/WatchlistPlaylistResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchlistPlaylistResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a watchlist playlist
      tags:
        - playlists
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/playlistId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/series/:
    get:
      summary: List series
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Series can be queried by the following attributes:
              - `custom_params`
              - `description`
              - `id`
              - `title`
              
            **Example**: `id:+abcd1234`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Sort order can be one of `asc`, `dsc`

            Series can be sorted by the following attributes:
              - `created`
              - `title`
              
            **Example**: `sort=created:dsc`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a series
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
          $ref: '#/components/requestBodies/SeriesResourceWriteCreate'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/series/{series_id}/:
    get:
      summary: Get a series
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a series
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
      requestBody:
        $ref: '#/components/requestBodies/SeriesResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a series
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/series/{series_id}/seasons/:
    get:
      summary: List seasons
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Seasons can be queried by the following attributes:
              - `id`
              
            **Example**: `id:+abcd1234`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results
            
            The sort order can be one of the following: `asc`, `dsc`

            Seasons can be sorted by the following attributes:
              - `created`
              - `number`
              
            **Example**: `sort=created:dsc`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a season
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
      requestBody:
        $ref: '#/components/requestBodies/SeasonResourceWriteCreate'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/series/{series_id}/seasons/{season_id}/:
    get:
      summary: Get a season
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a season
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
        - $ref: '#/components/parameters/seasonId'
      requestBody:
        $ref: '#/components/requestBodies/SeasonResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeasonResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a season
      tags:
        - series
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/seriesId'
        - $ref: '#/components/parameters/seasonId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/site_protection_rule/:
    get:
      summary: Get the site protection rule
      description: Get the site protection rule
      tags:
        - site protection rule
      parameters:
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteProtectionRuleResourceRead'
    patch:
      summary: Update the site protection rule
      description: Update the site protection rule
      tags:
        - site protection rule
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
          $ref: '#/components/requestBodies/SiteProtectionRuleResourceUpdate'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteProtectionRuleResourceRead'
        '400':
          $ref: '#/components/responses/400'
  "/v2/sites/{site_id}/ad_configs/":
    get:
      tags:
        - ssai
      summary: List ad configs
      description: >
        List all ad configs for a site
      parameters:
        - $ref: "#/components/parameters/siteId"
      responses:
        200:
          description: Request to list ad configs successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdConfigResourcesRead"
    post:
      tags:
        - ssai
      summary: Create an ad config
      description: >
        Create an ad config for a site
      parameters:
        - $ref: "#/components/parameters/siteId"
      requestBody:
        $ref: "#/components/requestBodies/AdConfigResourceWrite"
      responses:
        "201":
          description: Request to create ad config successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdConfigResourceRead"
  "/v2/sites/{site_id}/ad_configs/{ad_config_id}/":
    get:
      tags:
        - ssai
      summary: Get an ad config
      description: >
        Retrieve the details of a specific ad config
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/adConfigId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdConfigResourceRead"
    patch:
      tags:
        - ssai
      summary: Update an ad config
      description: >
        Update a specific ad config
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/adConfigId"
      requestBody:
        $ref: "#/components/requestBodies/AdConfigResourceWrite"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdConfigResourceRead"
    delete:
      tags:
        - ssai
      summary: Delete an ad config
      description: >
        Delete a specific ad config
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/adConfigId"
      responses:
        "204":
          description: Ad config successfully deleted
  "/v2/sites/{site_id}/media/{media_id}/timings/":
    get:
      tags:
        - ssai
      summary: List media timings sets
      description: >
        List all timings sets for a media
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
      responses:
        200:
          description: Request to list timings successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimingResourcesRead"
    post:
      tags:
        - ssai
      summary: Create a media timings set
      description: >
        Create a set of ad timings for a media
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
      requestBody:
        $ref: "#/components/requestBodies/TimingResourceWrite"
      responses:
        "201":
          description: Request to create timing successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimingResourceRead"
  "/v2/sites/{site_id}/media/{media_id}/timings/{timing_id}/":
    get:
      tags:
        - ssai
      summary: Get a media timings set
      description: >
        Get a specific set of ad timings for a media
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/timingId"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimingResourceRead"
    patch:
      tags:
        - ssai
      summary: Update a media timings set
      description: >
        Update a specific set of ad timings for a media
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/timingId"
      requestBody:
        $ref: "#/components/requestBodies/TimingResourceWrite"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimingResourceRead"
    delete:
      tags:
        - ssai
      summary: Delete a media timings set
      description: >
        Delete a specific set of ad timings for a media
      parameters:
        - $ref: "#/components/parameters/siteId"
        - $ref: "#/components/parameters/mediaId"
        - $ref: "#/components/parameters/timingId"
      responses:
        "204":
          description: Timings set successfully deleted
  /v2/sites/{site_id}/tags/:
    get:
      summary: >-
        List tags
      description: >-
        List tags on the account
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: name
          description: Search term used to query tags
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=name:dsc`

            Tags can sorted by the following attributes:
              - `name`
          in: query
          required: false
          schema:
            type: string
            default: name:asc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a tag associated with a given site
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
          $ref: '#/components/requestBodies/TagsResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResourceRead'
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/remove_tag/:
    put:
      summary: Bulk remove tags
      description: >-
          Removes and deletes a tag across all associated media and playlist resources, removing it from dashboard suggestions 
          
          This makes it possible to recreate the tag with a different capitalization.

          The time to complete the tag removal depends upon the number of associated media and playlists.
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/RemoveTagBody'
      responses:
        '202':
          description: Request accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/rename_tag/:
    put:
      summary: Bulk rename tags
      description: >-
          Renames a tag across all associated media and playlist resources

          The time to complete the tag renaming depends upon the number of associated media and playlists.
      tags:
        - tags
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/RenameTagBody'
      responses:
        '202':
          description: Request accepted
        '400':
          $ref: '#/components/responses/400'
  /v2/sites/{site_id}/media/{media_id}/text_tracks/:
    get:
      summary: List text tracks
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `srclang:+en`

            Text tracks can be queried by the following attributes:
              - `id`
              - `label`
              - `srclang`
              - `status`
              - `track_kind`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Sort order can be one of `asc`, `dsc`

            Text tracks can be sorted by the following attributes:
              - `created`
              - `last_modified`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextTrackResourcesRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    post:
      summary: Create a text track
      description: Generate a text track for the associated media. Each media can have a maximum of 50 text tracks.
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
      requestBody:
          $ref: '#/components/requestBodies/TextTrackResourceWriteCreate'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextTrackResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          description: Request cannot be created because media reached maximum limit of 50.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v2/sites/{site_id}/media/{media_id}/text_tracks/{track_id}/:
    get:
      summary: Get a text track
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/trackId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextTrackResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a text track
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/trackId'
      requestBody:
          $ref: '#/components/requestBodies/TextTrackResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextTrackResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a text track
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/trackId'
      responses:
        '204':
          description: Text track successfully deleted
        '404':
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/media/{media_id}/text_tracks/{track_id}/publish/:
    put:
      summary: Publish a track
      description: >-
        Enables a text track to be delivered via the Delivery API by changing the track status from `draft` to `ready`.
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/trackId'
      responses:
        '204':
          description: Request successful
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/media/{media_id}/text_tracks/{track_id}/unpublish/:
    put:
      summary: Unpublish a track
      description: >-
        Prevents a text track from delivering via the Delivery API by changing the track status from `ready` to `draft`.
      tags:
        - text tracks
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/mediaId'
        - $ref: '#/components/parameters/trackId'
      responses:
        '204':
          description: Request successful
        '409':
          $ref: '#/components/responses/409'
  /v2/sites/{site_id}/thumbnails/:
    post:
      summary: Create a thumbnail
      description: Create a thumbnail
      tags:
        - thumbnails
      parameters:
        - $ref: '#/components/parameters/siteId'
      requestBody:
        $ref: '#/components/requestBodies/ThumbnailCreateBody'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailResourceRead'
        '400':
          $ref: '#/components/responses/400'
    get:
      summary: List thumbnails
      description: List thumbnails
      tags:
        - thumbnails
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `media_id:+bIAkzJDs`

            Thumbnails can be queried by the following attributes:
              - `is_poster`
              - `media_id`
              - `source_type`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Thumbnails can sorted by the following attributes:
              - `created`
              - `source_type`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailResourcesRead'
        '400':
              $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
  /v2/sites/{site_id}/thumbnails/{thumbnail_id}/:
    patch:
      summary: Update a thumbnail
      description: Update a thumbnail
      tags:
        - thumbnails
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/thumbnailId'
      requestBody:
        $ref: '#/components/requestBodies/ThumbnailUpdateBody'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    get:
      summary: Get a thumbnail
      description: Get a thumbnail
      tags:
        - thumbnails
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/thumbnailId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailResourceRead'
        '404':
            $ref: '#/components/responses/404'
    delete:
      summary: Delete a thumbnail
      description: Delete a thumbnail
      tags:
        - thumbnails
      parameters:
        - $ref: '#/components/parameters/siteId'
        - $ref: '#/components/parameters/thumbnailId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/uploads/{upload_id}/parts/:
    get:
      summary: List upload parts
      description: >
          List of parts, both completed and uncompleted, each of which represents a range of bytes
          for a multipart upload

          All multipart uploads start with 10,000 parts. All completed parts will be included in the final upload file.
      security:
        - uploadTokenAuth: []
      tags:
        - uploads
      parameters:
        - in: path
          name: upload_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadPartResourcesRead"
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/uploads/{upload_id}/complete/:
    put:
      summary: Complete an upload
      description: All parts must be uploaded to complete the multipart upload.
      security:
        - uploadTokenAuth: []
      tags:
        - uploads
      parameters:
        - in: path
          name: upload_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        '202':
          description: Upload successfully completed
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /v2/webhooks/:
    get:
      summary: List webhooks
      description: List webhooks on the account
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/pageLengthParam"
        - name: q
          description: |
            Allows for [querying results](https://developer.jwplayer.com/jwplayer/reference/building-a-request#query-parameter-q)

            Example: `id:+bIAkzJDs`

            Webhooks can be queried by the following attributes:
              - `id`
              - `event`
              - `name`
              - `site_id`
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: |
            Allows for sorting results

            Example: `sort=created:dsc`

            Webhooks can sorted by the following attributes:
              - `created`
              - `last_modified`
              - `name`
          in: query
          required: false
          schema:
            type: string
            default: created:dsc
      tags:
        - webhooks
      responses:
        '200':
          description: Resources successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResourcesRead'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a webhook
      description: Create a webhook
      tags:
        - webhooks
      requestBody:
        $ref: '#/components/requestBodies/WebhookResourceWrite'
      responses:
        '201':
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResourceReadCreate'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
  /v2/webhooks/{webhook_id}/:
    get:
      summary: Get a webhook
      description: Get a webhook
      tags:
        - webhooks
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        '200':
          description: Resource successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResourceRead'
        '404':
          $ref: '#/components/responses/404'
    patch:
      summary: Update a webhook
      description: Update a webhook
      tags:
        - webhooks
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      requestBody:
        $ref: '#/components/requestBodies/WebhookResourceWrite'
      responses:
        '200':
          description: Resource successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResourceRead'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      summary: Delete a webhook
      description: Delete a webhook
      tags:
        - webhooks
      parameters:
        - in: path
          name: webhook_id
          required: true
          schema:
            $ref: '#/components/schemas/ResourceId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
components:
  parameters:
    schemaId:
      name: schema_id
      description: Unique alphanumeric ID of the content type schema
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    appConfigId:
      name: app_config_id
      description: Unique alphanumeric ID of the app config
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    imageId:
      name: image_id
      description: Unique alphanumeric ID of the image
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    thumbnailId:
      name: thumbnail_id
      description: Unique alphanumeric ID of the thumbnail
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    siteId:
      name: site_id
      description: Unique alphanumeric ID of the site
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    mediaId:
      name: media_id
      description: Unique alphanumeric ID of the media
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    trackId:
      name: track_id
      description: Unique alphanumeric ID of the text track
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    importId:
      name: import_id
      description: Unique alphanumeric ID of the import
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    channelId:
      name: channel_id
      description: Unique alphanumeric ID of the live channel
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    eventId:
      name: event_id
      description: Unique alphanumeric ID of the live event
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    placementId:
      name: placement_id
      description: Unique identifier for the strategy rules placement resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    playerId:
      name: player_id
      description: Unique identifier for the player resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    playlistId:
      name: playlist_id
      description: Unique alphanumeric ID of the playlist
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    mediaRenditionId:
      name: rendition_id
      description: ID of a single video source or audio source of a media asset
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    protectionruleId:
      name: protection_rule_id
      description: Unique alphanumeric ID of the protection rule
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    adScheduleId:
      name: ad_schedule_id
      description: Unique alphanumeric ID of the advertising schedule
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    originalId:
      name: original_id
      description: Unique identifier for an original resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    audioTrackId:
      name: audio_track_id
      description: Unique identifier for an audio track resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    seriesId:
      name: series_id
      description: Unique identifier for a series resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    seasonId:
      name: season_id
      description: Unique identifier for a season resource
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    policyId:
      name: policy_id
      description: Unique 8-character DRM policy identifier
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    logoId:
      name: logo_id
      description: Unique alphanumeric ID of the logo
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
    adConfigId:
      name: ad_config_id
      description: Unique alphanumeric ID of an ad config
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ResourceId"
    timingId:
      name: timing_id
      description: Unique alphanumeric ID of a set of media timings
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ResourceId"
    pageParam:
      name: page
      description: Sets the page number for pagination. First page is `1`.
      in: query
      required: false
      schema:
        type: integer
        default: 1
    pageLengthParam:
      name: page_length
      description: |
        Sets the page length (number of items you get in the response) for pagination
        
        If `page_length` is not specified, the default value will be set.

        Default: `10`
      in: query
      required: false
      schema:
        type: integer
        default: 10
    dryRunHeader:
      name: Jw-Dry-Run
      description: >
        Set the `Jw-Dry-Run` header to `true` if you want to validate your payload,
        but do not want the server to actually store the changes.
      in: header
      required: false
      schema:
        type: boolean
    streamId:
      name: stream_id
      description: Unique alphanumeric ID of the live stream
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ResourceId'
  schemas:
    TagsResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            tags:
              type: array
              items:
                $ref: '#/components/schemas/TagsResourceRead'
    TagsResourceRead:
      description: >-
        Single tag
      type: object
      properties:
        created:
          description: Original creation date and time in ISO 8601 format
          type: string
          format: date-time
          example: '2018-10-02T21:19:36.602019+00:00'
        last_modified:
          description: Last original modification date and time in ISO 8601 format
          type: string
          format: date-time
          example: '2018-10-02T21:19:36.602019+00:00'
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/TagsResourceMetadata'
    TagsResourceMetadata:
      description: >-
        Metadata of tag.
      type: object
      properties:
        name:
          description: Unique name used to identify tag
          type: string
    ImageMetadata:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
          additionalProperties: false
          properties:
            label:
              type: string
              format: string
              description: |
                Label associated with the image
                
                There can be a maximum of 40 labels per site. A label can be associated with multiple images.
                 
                This value can be used to access the image via the Delivery API.
              example: roku-portrait
    ImageUploadMetadata:
      type: object
      properties:
        upload:
          type: object
          description: >-
            Method and information required to upload and process the image
          properties:
            method:
              description: |
                Upload method

                **Possible values**:
                - `direct`: Best for uploading image files on a local machine

                - `fetch`: Best for uploading images files hosted on another platform

                - `multipart`: Best for uploading image files on a local machine that are uploaded in chunks
              type: string
              example: direct
              enum:
              - direct
              - fetch
              - multipart
            download_url:
              description: |
                URL of the image to fetch

                This is **required** for the `fetch` upload method
    ImageResourceRead:
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - $ref: "#/components/schemas/ImageMetadata"
        - type: object
          properties:
            image_data:
              description: >
                Object containing information about the image
              type: object
              additionalProperties: false
              properties:
                width:
                  description: >
                    Width in pixels of the original image
                  type: integer
                  example: 1920
                height:
                  description: >
                    Height in pixels of the original image
                  type: integer
                  example: 1080
                mime_type:
                  description: >
                    MIME type of the original image
                  type: string
                  enum:
                    - image/jpeg
                    - image/png
                    - image/webp
                  example: image/jpeg
    ImageCreateResourceRead:
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - $ref: "#/components/schemas/ImageResourceRead"
        - type: object
          properties:
            upload_link:
              type: string
              description: >
                URL to be used for uploads

                This is returned only when `upload.method` is `direct`.
    ImageResourcesRead:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            images:
              description: >
                Array with all images for the media
              type: array
              items:
                $ref: "#/components/schemas/ImageResourceRead"
    SeriesResourceMetadata:
      type: object
      properties:
        sort:
          type: object
          description: Dictates the order in which seasons and episodes are displayed to the viewer
          properties:
            season:
              description: |
                  Order in which seasons are displayed to the viewer
                  
                  **Possible values**:
                  - `asc`: The first season of the series is shown first.
                  - `dsc`: The most recent season of the series is shown first.
              type: string
              enum:
                - asc
                - dsc
            episode:
              description: |
                  Order in which episodes are displayed to the viewer
                  
                  **Possible values**:
                  - `asc`: The first episode of the series or season is shown first.
                  - `dsc`: The most recent episode of the series or season is shown first.
              type: string
              enum:
                - asc
                - dsc
    SeriesResourceRelationship:
      type: object
      properties:
        media:
          description: List of media IDs and the associated episode number for each
          type: array
          items:
            type: object
            required:
              - episode_number
              - id
            properties:
              id:
                 $ref: '#/components/schemas/MediaId'
              episode_number:
                type: number
                description: Episode number of the media
    SeasonResourceMetadata:
      type: object
      properties:
        title:
          type: string
          description: |
            Title of the season

            When a `title` is not specified, the `number` value is used for the season title.
        number:
          type: number
          description: Number of the season
        description:
          type: string
          description: Description of the season
    SeriesResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/SeriesResourceMetadata'
            relationships:
              $ref: '#/components/schemas/SeriesResourceRelationship'
            episode_count:
              type: number
              description: Number of episodes associated with the series
            season_count:
              type: number
              description: Number of seasons associated with the series
            total_duration:
              type: number
              description: Total runtime of the series in minutes
    SeriesResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            series:
              type: array
              items:
                $ref: '#/components/schemas/SeriesResourceRead'
    SeasonResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/SeasonResourceMetadata'
            relationships:
              $ref: '#/components/schemas/SeriesResourceRelationship'
            episode_count:
              type: number
              description: Number of episodes associated with the season
            total_duration:
              type: number
              description: Total runtime of the season in minutes
    SeasonResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            seasons:
              type: array
              items:
                $ref: '#/components/schemas/SeasonResourceRead'
    ThumbnailResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            delivery_url:
              description: Link to retrieve thumbnail once its been successfully uploaded and `status` is set to `ready`
              type: string
              example: "https://cdn.jwplayer.com/v2/media/asdf1234/thumbnails/qwer4567"
            file_type:
              type: string
              description: File extension used for this thumbnail
              enum:
                - jpeg
                - mp4
            status:
              type: string
              description: Readiness state of this thumbnail
              enum:
                - created
                - deleted
                - failed
                - ready
            thumbnail_type:
              type: string
              enum:
                - static
                - video
            source_type:
              description: |
                Source of the thumbnail upload

                **Possible Values**:
                - `custom_upload`: User-provided thumbnail
                - `default`: Default thumbnail automatically pulled from 10 seconds into the video
                - `generic_audio`: Default thumbnail created for externally hosted media with `media_type` set to `audio`
                - `generic_video`: Default thumbnail created for externally hosted media with `media_type` set to `video`
                - `thumbstrip_image`: Thumbnail selected from the thumbstrip images via `video_position` or `thumbstrip_index`
              type: string
              enum:
                - custom_upload
                - default
                - generic_audio
                - generic_video
                - thumbstrip_image
            metadata:
              $ref: '#/components/schemas/ThumbnailResourceMetadata'
            relationships:
              type: object
              required: [ media ]
              properties:
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/RelationshipRead'
    ThumbnailResourceMetadata:
      type: object
    ThumbnailResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            thumbnails:
              type: array
              items:
                $ref: '#/components/schemas/ThumbnailResourceRead'
    ImportResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource representing an MRSS source
          properties:
            total_items_ingested:
              type: integer
              description: Total number of media imported from this source
            last_import:
              type: string
              description: Date of the last import from this source
              format: date-time
              example: '2018-10-03T21:19:36.602019+00:00'
            metadata:
              $ref: '#/components/schemas/ImportResourceReadMetadata'
    ImportResourceReadMetadata:
      allOf:
        - $ref: '#/components/schemas/ImportResourceMetadata'
        - type: object
          properties:
            password:
              type: boolean
              default: false
              description: Whether or not a password was specified when created
            state:
              type: string
              description: Current import state
              default: inactive
              enum:
                - error
                - importing
                - inactive
                - paused
    ImportResourceWriteMetadata:
      allOf:
        - $ref: '#/components/schemas/ImportResourceMetadata'
        - type: object
          properties:
            password:
              type: string
              description: Password used to access the MRSS feed at the URL when using Basic HTTP Authentication
            state:
              type: string
              description: Current import state
              default: inactive
              enum:
                - importing
                - paused
    ImportResourceMetadata:
      type: object
      properties:
        url:
          type: string
          description: URL that will be requested to import the MRSS feed
        host_on_import:
          type: boolean
          description: Indicates whether or not the media should be hosted with JW Player
        title:
          type: string
          description: Title of the source
        type:
          type: string
          description: Type of import
          default: feed
          enum:
            - feed
        username:
          type: string
          default: null
          description: Username used to access the MRSS feed at the URL when using Basic HTTP Authentication
        tags:
          type: array
          description: Tags to be applied to all media added via this specific MRSS feed
          items:
            type: string
          example: ["tag1", "tag2", "tag3"]
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
        ingest_metadata:
          type: object
          description: |
            If available and enabled, maps the value of an MRSS element to JW Player media metadata fields or creating tags for the imported media

            **NOTE**: If unspecified, all values are set to `true`.

            **MRSS element to JW Player mapping**:
            - `media:text` -> captions
            - `media:category` -> category
            - `media:credit` -> credits
            - `media:description` -> description
            - `media:keywords` -> keywords
            - `pubDate` -> publish date
            - `media:tags` -> tags
            - `media:thumbnails` -> thumbnails
          properties:
            captions:
              type: boolean
              default: true
            categories:
              type: boolean
              default: true
            credits:
              type: boolean
              default: true
            description:
              type: boolean
              default: true
            keywords:
              type: boolean
              default: true
            publish_date:
              type: boolean
              default: true
            tags:
              type: boolean
              default: true
            thumbnails:
              type: boolean
              default: true
        ingest_tags:
          type: array
          description: >-
            If available, creates tags for the imported media from the values in name-spaced MRSS elements
          example: ["jp:uploadDate", "jp:preview", "jp:duration"]
          items:
            type: string
        simple_ingest_custom_params:
          type: array
          description: >-
            If available, creates custom parameters for the imported media from the values in name-spaced MRSS elements

            The example element names shown below are imported as **genre**, **rating**, and **language**.
          example: [ "jp:genre", "jp:rating", "jp:language" ]
          items:
            type: string
        external_id_field_name:
          type: string
          default: null
          description: |
            (Enterprise only) Value within the name-spaced MRSS element

            If available, the value is used as the `external_id` for the imported media.

            For example, given `<jp:ref_id>1234abcd</jp:ref_id>`, `1234abcd` is set as the value of `external_id`.
      required:
        - host_on_import
        - title
        - url
    ImportResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            sources:
              type: array
              items:
                $ref: '#/components/schemas/ImportResourceRead'
    CustomParamSchema:
      description: |
        User-generated key-value pairs

        When defining `custom_params`, include all custom parameters that should be associated with the target resource.

        When updating existing `custom_params`, include all `custom_params` keys with their updated values. Any `custom_params` key-value pair not included within the updated `custom_params` in the request body is [deleted](doc:stream-faq-how-can-i-delete-a-custom-parameter).
      type: object
      additionalProperties:
        type: string
        description: >-
          A maximum of 7500 characters is permitted.
      example:
        param1: value1
    LiveChannelResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            channels:
              type: array
              items:
                $ref: '#/components/schemas/LiveChannelResourceRead'
    TextTrackResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            text_tracks:
              type: array
              items:
                $ref: '#/components/schemas/TextTrackResourceRead'
    TextTrackResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/TextTrackMetadata'
            delivery_url:
              type: string
              description: >-
                URL to access the text track
                This URL is only returned when the text track status is `ready` or `draft`.
            error_message:
              type: string
              description: A human-readable error message for describing upload failures
            track_kind:
              $ref: '#/components/schemas/TextTrackKind'
            upload_link:
              type: string
              description: Presigned S3 link for uploading a track
    TextTrackWriteMetadata:
      allOf:
        - $ref: '#/components/schemas/TextTrackMetadata'
        - type: object
          properties:
            track_kind:
              $ref: '#/components/schemas/TextTrackKind'
          required:
            - track_kind
    TextTrackKind:
      description: >-
        Kind of text track

        This corresponds with the HTML `<track>` element `kind` attribute.
      type: string
      enum:
        - captions
        - chapters
        - descriptions
        - metadata
        - subtitles
      example: captions
    TextTrackMetadata:
      type: object
      properties:
        label:
          description: |
            Label of the text track

            A maximum of 50 characters is permitted.

            For `captions` and `subtitles` tracks, this property is the display name in the JW Player settings menu.
            For `chapters`, `descriptions`, and `metadata`  tracks, this property serves as a name for the track.

            **NOTE**: This label cannot be named `default`.
          type: string
        srclang:
          description: >-
            Language of the text track data

            A maximum of 32 characters is permitted.

            Primarily applicable for `captions` and `subtitles`, this value corresponds to the `srclang` attribute of the `<track>` element.
          type: string
        position:
          description: >-
            (Captions and subtitles only) Determines the location of a track in two contexts:

              - Location in a media’s list of tracks in the Delivery API
              - Location in the captions settings menu of the JW Player.

            The value of `position` cannot exceed the highest index of all subtitles and captions associated to the media.
          type: integer
    LiveChannelResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            relationships:
              type: object
              properties:
                protection_rule:
                  $ref: '#/components/schemas/RelationshipRead'
            metadata:
              $ref: '#/components/schemas/LiveChannelResourceMetadata'
            preview_url:
              type: string
              description: |
                URL pointing to a preview of the stream

                This is only present when channel has a `preview` status.
              example: "https://api.mux.com/video/v1/314159265358979323846264.m3u8"
            recent_events:
              type: array
              items:
                type: object
                additionalProperties: false
                properties:
                  media_id:
                    $ref: '#/components/schemas/MediaId'
                  status:
                    type: string
                    enum:
                      - active
                      - completed
                      - idle
                      - errored
                    example: idle
            status:
              type: string
              enum:
                - creating
                - active
                - idle
              example: idle
            stream_key:
              type: string
              example: 123456ABCDEF
    LiveChannelResourceMetadata:
      type: object
      additionalProperties: false
      properties:
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
        dvr:
          description: Enable or disable the DVR settings of the playback stream
          type: string
          enum:
            - on
            - off
          default: off
          example: on
        latency:
          description: >-
            Type of latency for the live event stream, one of:
            * `default`: Delay from the video encoder to end-user’s player video is about 25 seconds. If your encoder
              has network issues it shas up to 30 seconds to reconnect before the event is automatically ended.
            * `reduced`: Delay from video encoder to end-user’s player is about 10 seconds. This is good for news and
              sports. The event will be automatically ended if your encoder has network issues and loses
              connectivity to the RTMP entry URL for any amount of time. Thus, your encoder should have
              a high-speed and reliable connection to the Internet.
            * `low`: This enables Low-Latency HLS (aka LL-HLS) streaming. Historically, HLS has favored stream
              reliability over latency. Low-Latency HLS extends the protocol to enable low-latency video streaming
              while maintaining scalability. Please note that LL-HLS is a fairly new extension of the protocol and
              3rd party devices may not all support it at this moment. 
              Low-Latency streaming does not currently support text tracks.
          type: string
          enum:
            - default
            - reduced
            - low
          default: default
          example: default
        publishing_mode:
          description: |
            Defines how the events of a channel are made available to viewers

            * `auto`:  When the encoder starts, viewers can watch the stream.
            * `manual`: When the encoder starts, viewers cannot watch the stream until the stream has been [published](/#operation/livestreamChannelEventPublish) from the JW Player dashboard.  In this publish mode, DVR **cannot** be enabled.
          type: string
          enum:
            - auto
            - manual
          default: auto
        reconnect_window:
          description: >
            If the server does not receive any packets for a period of `reconnect_window` seconds,
            the server closes the connection.
          type: integer
          enum:
            - 5
            - 60
            - 300
          default: 60
          example: 60
        simulcast_targets:
          minItems: 0
          maxItems: 3
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              stream_key:
                type: string
                example: 123456ABCDEF
              stream_url:
                description: Ingest RTMP/s URL for the simulcast `simulcast_targets`
                type: string
              title:
                type: string
          example:
            - stream_key: ABCDEF123456
              stream_url: rtmps://live.fb
              title: My Facebook Simulcast
        tags:
          type: array
          items:
            type: string
          example:
            - sports
            - football
        text_tracks:
          description: >
            List of embedded text tracks (subtitles or closed captions)
            Only a single track is currently supported.
            **NOTE**: `text_tracks` with low latency is currently not supported.
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              label:
                description: >
                  Label of the text track

                  A maximum of 50 characters is permitted.
                type: string
              srclang:
                description: Language of the text track data. Must be ISO 639-1 compliant
                type: string
              track_kind:
                description: Kind of text track
                type: string
                enum:
                  - captions
                  - subtitles
                example: captions
            required:
              - track_kind
          minItems: 0
          maxItems: 1
          example:
            - label: English captions
              srclang: en
              track_kind: captions
        title:
          type: string
          maxLength: 500
          example: Your live channel title
    LiveChannelEventResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/LiveChannelEventResourceRead'
    LiveChannelEventResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for an event associated with a live channel
          properties:
            master_access:
              type: object
              additionalProperties: false
              properties:
                status:
                  type: string
                  enum:
                    - unavailable
                    - requested
                    - available
                  example: available
                expiration:
                  description: >
                    Shows the ultimate date and time that the master can be downloaded before access needs
                    to be requested again. When access is not available, `null` is returned
                  type: string
                  format: date-time
                  example: 2022-11-11T07:50:00+00:00
                  nullable: true
            media_id:
              $ref: '#/components/schemas/MediaId'
            metadata:
              type: object
              additionalProperties: false
            status:
              type: string
              enum:
                - active
                - completed
                - idle
                - errored
              example: idle
    LivestreamEventClipMetadata:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
        trim_in_point:
          description: >
            Timecode in point for trimming the source in the format HH:MM:SS.mmm,
            for example, 03:02:45.106 for 3 hours, 2 minutes, and 45.106 seconds.
            If `trim_in_point` is not specified and `trim_out_point` is specified, then the `trim_in_point` will automatically be set
            to `00:00:00.000`. Likewise, if the value is out of bounds, then the `trim_in_point` will automatically
            be set to `00:00:00.000`.
          type: string
          example: '03:02:45.106'
        trim_out_point:
          description: >
            Timecode out point for trimming the source in the format HH:MM:SS.mmm,
            for example, 03:02:45.106 for 3 hours, 2 minutes, and 45.106 seconds.
            If `trim_out_point` is not specified and `trim_in_point` is specified, then the `trim_out_point` will automatically be
            set to the duration of the original video. If the trim_out_point value is out of bounds, then the
            `trim_out_point` will automatically be set to the duration of the original video. Likewise, if the value is
            out of bounds, then the `trim_out_point` will automatically be set to the duration of the original video.

          type: string
          example: '03:02:45.106'
    LiveChannelEventClipResponse:
      type: object
      additionalProperties: false
      properties:
        media_id:
          $ref: '#/components/schemas/MediaId'
    PlacementResourceMetadataCreate:
      allOf:
        - $ref: '#/components/schemas/PlacementResourceMetadata'
        - type: object
          required:
            - name
    PlacementResourceMetadata:
      type: object
      properties:
        name:
          type: string
          description: Display name for the placement
        description:
          type: string
          description: Description of the placement
        enabled:
          type: boolean
          description: Indicates whether the placement is enabled for delivery
          default: true
    PlacementResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/PlacementResourceMetadata'
            is_deliverable:
              description: Indicates whether the placement is active and ready for delivery
              type: boolean
            relationships:
              type: object
              properties:
                strategy:
                  $ref: '#/components/schemas/RelationshipRead'
    PlacementResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            placements:
              type: array
              items:
                $ref: '#/components/schemas/PlacementResourceRead'
    PlayerMetadata:
      type: object
      properties:
        name:
          description: >-
            User-generated name used to uniquely identify a player

            A maximum of 10000 characters is permitted.
          type: string
        setup_config:
          description: >-
            Set of [features, behaviors, and options](https://developer.jwplayer.com/jwplayer/docs/jw8-player-configuration-reference#setup-options) used to instantiate a player
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: object
        release_channel:
          description: >-
            Defines the [release channel](https://developer.jwplayer.com/jwplayer/docs/jw8-use-jw-player-release-channels) to which the player is set

            Release channels offer different speeds of automatically updating player versions.

            Default: `latest`
          type: string
          default: latest
          enum:
            - latest
            - biannual
            - downgrade
            - preview
            - previous
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
    PlayerResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/PlayerMetadata'
            version:
              description: Major version associated with the player
              type: string
              enum:
                - '8'
            relationships:
              type: object
              properties:
                recommendations_playlist:
                  $ref: '#/components/schemas/RelationshipRead'
                adschedule:
                  $ref: '#/components/schemas/RelationshipRead'
    PlayerResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            players:
              type: array
              items:
                $ref: '#/components/schemas/PlayerResourceRead'
    PlayerLogoResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/PlayerLogoResourceMetadata'
            upload_link:
              description: Upload URL of the logo
              type: string
    PlayerLogoResourceMetadata:
      type: object
      properties:
        status:
          type: string
          description: >-
            Status of the logo
            Possible values include:
            - `created`: The logo has been created and is ready to be used.
            - `failed`: The logo failed to be created.
            - `processing`: The logo is being processed.
            - `ready`: The logo has been created and is ready to be used.
          enum:
            - created
            - failed
            - processing
            - ready
          example: ready
    PlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/PlaylistMetadata'
            playlist_type:
              type: string
              description: |-
                Type of playlist

                Possible values include:

                - `article_matching`: (Enterprise only) Insert contextually relevant videos into your articles. Filtering rules apply, including tag rules (inclusion and exclusion) and recency filtering. Article Matching playlists are limited to a **maximum of 100 videos**. Also read about how to [Embed videos with Article Matching](doc:jw8-embed-relevant-videos-with-article-matching).

                - `dynamic`: Automatically sort your videos using PATCH `/v2/playlists/{playlist_id}/dynamic_playlist` API call to specify what to sort by (publish date for example). Dynamic playlists are limited to a **maximum of 500 videos**.

                - `manual`: Manual channels are ordered by the user manually. Manage the playlist's content using POST and PATCH `/v2/playlists/{playlist_id}/manual_playlist` API calls. Manual playlists are limited to a **maximum of 10,000 videos**.

                - `recommendations`: (Enterprise only) Recommendation playlists return a set of recommended videos based on a source video. Recommendations playlists are limited to a **maximum of 100 videos**.

                - `search`: (Enterprise only) Search playlists contain videos ordered by similarity to a search term or phrase. Set the rules by which the playlist is filtered by using PATCH `/v2/playlists/{playlist_id}/search_playlist` API call. Search playlists are limited to a **maximum of 100 videos**.

                - `watchlist`: (Apps only) Watch list playlists return a set of videos based on viewer interactions within apps. For more information regarding Watch list playlists, please reach out to your JW Player representative.
              enum:
                - article_matching
                - dynamic
                - manual
                - search
                - watchlist
            default:
              type: boolean
              description: |-
                (Recommendations) Indicates that the playlist is the default Recommendations playlist
    PlaylistResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            playlists:
              type: array
              items:
                $ref: '#/components/schemas/PlaylistResourceRead'
    PlaylistMetadata:
      type: object
      properties:
        title:
          description: >-
            Title of the playlist.

            When using JW Player's HTML5 player, the playlist title is displayed in the overlay.

            A maximum of 256 characters is permitted.
          type: string
        description:
          description: >-
            Description of the playlist

            A maximum of 7500 characters is permitted.
          type: string
        author:
          description: >-
            Author of the playlist

            A maximum of 256 characters is permitted.
          type: string
        link:
          description: >-
            URL to be associated with the playlist

            A maximum of 2048 characters is permitted.
          type: string
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
    PlaylistLimit:
      description: >-
        For manual playlists, the limit determines the maximum number of media that can be included in a given playlist.
      type: integer
      default: 25
    PlaylistPinning:
      type: object
      description: Playlist IDs to be pinned in the first and/or second slot of a playlist
      properties:
        slot1:
          $ref: '#/components/schemas/PlaylistId'
        slot2:
          $ref: '#/components/schemas/PlaylistId'
    PlaylistRecency:
      type: string
      description: Recency logic to apply to playlist. Valid recency values begin with an integer and end with a unit of time, either days (D) or years (YR)
      example:
        - '30D'
        - '1YR'
    PlaylistCustomParamFilter:
      type: object
      description: >-
          Playlist custom parameters to apply filtering logic from. The filter logic will change based the `match` value in the `include` and `exclude` sections (the `match` value can be one of `any` or `all`).

          * If the `match` mode is set to `any`, a video with any of the specified custom paramaters will be included or excluded from the playlist.
          * If the `match` mode is set to `all` a video must have all the specified custom parameters to be included or excluded from the playlist.
      properties:
        include:
          $ref: '#/components/schemas/PlaylistParamRules'
        exclude:
          $ref: '#/components/schemas/PlaylistParamRules'
    PlaylistTagFilter:
      type: object
      description: >-
        Playlist tags to apply filtering logic from. The filter logic will change based the `match` value in the `include` and `exclude` sections (the `match` value can be one of `any` or `all`).

          * If the `match` mode is set to `any`, a video with any of the specified tags will be included or excluded from the playlist.
          * If the `match` mode is set to `all` a video must have all the specified tags to be included or excluded from the playlist.
      properties:
        include:
          $ref: '#/components/schemas/PlaylistTagRules'
        exclude:
          $ref: '#/components/schemas/PlaylistTagRules'
    PlaylistTagRules:
      type: object
      description: Tags used to filter the media result set for the playlist. A maximum of 200 tags are allowed per playlist (inclusive of both include and exclude values).
      properties:
        values:
          type: array
          items:
            type: string
          uniqueItems: true
        match:
          $ref: '#/components/schemas/PlaylistMatch'
    PlaylistParamRules:
      description: Media Custom Parameters used to filter the media result set for the playlist. A maximum of 100 custom parameter's are allowed per playlist (inclusive of both include and exclude values).
      type: object
      properties:
        values:
          type: object
          additionalProperties:
            type: string
          example:
            param1: value1
        match:
          $ref: '#/components/schemas/PlaylistMatch'
    PlaylistMatch:
      description: Whether to apply any or all logic to provided values
      type: string
      enum:
        - any
        - all
    ManualPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing a manual playlist
          properties:
            metadata:
              $ref: '#/components/schemas/ManualPlaylistMetadata'
    DynamicPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing a dynamic playlist
          properties:
            metadata:
              $ref: '#/components/schemas/DynamicPlaylistMetadata'
    ArticleMatchingPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing an article matching playlist
          properties:
            metadata:
              $ref: '#/components/schemas/ArticleMatchingPlaylistMetadata'
    SearchPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing a search playlist
          properties:
            metadata:
              $ref: '#/components/schemas/SearchPlaylistMetadata'
    RecommendationsPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing a recommendations playlist
          properties:
            metadata:
              $ref: '#/components/schemas/RecommendationsPlaylistMetadata'
    WatchlistPlaylistResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing a watchlist playlist
          properties:
            metadata:
              $ref: '#/components/schemas/PlaylistMetadata'
    ManualPlaylistMetadata:
      allOf:
      - $ref: '#/components/schemas/PlaylistMetadata'
      - type: object
        properties:
          media_filter:
            type: object
            properties:
              include:
                type: object
                properties:
                  match:
                    type: string
                    enum:
                      - any
                  values:
                    type: array
                    description: Ordered list of Media IDs to include in playlist. A maximum of 10,000 media are allowed per playlist.
                    items:
                      $ref: '#/components/schemas/MediaId'
    DynamicPlaylistMetadata:
      allOf:
      - $ref: '#/components/schemas/PlaylistMetadata'
      - type: object
        properties:
          tag_filter:
            $ref: '#/components/schemas/PlaylistTagFilter'
          custom_param_filter:
            $ref: '#/components/schemas/PlaylistCustomParamFilter'
          media_filter:
            type: object
            properties:
              sort:
                description: Only applies to dynamic playlists, dictating playlist ordering.
                type: string
                enum:
                  - 'duration:asc'
                  - 'duration:dsc'
                  - 'plays:asc'
                  - 'plays:dsc'
                  - 'publish_start_date:asc'
                  - 'publish_start_date:dsc'
                  - 'shuffle'
                  - 'title:asc'
                  - 'title:dsc'
                  - 'trending:asc'
                  - 'trending:dsc'
                default: publish_start_date:dsc
              limit:
                $ref: '#/components/schemas/PlaylistLimit'
          pinning:
            $ref: '#/components/schemas/PlaylistPinning'
    ArticleMatchingPlaylistMetadata:
      allOf:
      - $ref: '#/components/schemas/PlaylistMetadata'
      - type: object
        properties:
          tag_filter:
            $ref: '#/components/schemas/PlaylistTagFilter'
          custom_param_filter:
            $ref: '#/components/schemas/PlaylistCustomParamFilter'
          media_filter:
            type: object
            properties:
              limit:
                $ref: '#/components/schemas/PlaylistLimit'
          pinning:
            $ref: '#/components/schemas/PlaylistPinning'
          recency:
            $ref: '#/components/schemas/PlaylistRecency'
    SearchPlaylistMetadata:
      allOf:
      - $ref: '#/components/schemas/PlaylistMetadata'
      - type: object
        properties:
          tag_filter:
            $ref: '#/components/schemas/PlaylistTagFilter'
          custom_param_filter:
            $ref: '#/components/schemas/PlaylistCustomParamFilter'
          media_filter:
            type: object
            properties:
              limit:
                $ref: '#/components/schemas/PlaylistLimit'
          pinning:
            $ref: '#/components/schemas/PlaylistPinning'
          recency:
            $ref: '#/components/schemas/PlaylistRecency'
    RecommendationsPlaylistMetadata:
      allOf:
        - $ref: '#/components/schemas/PlaylistMetadata'
        - type: object
          properties:
            tag_filter:
              $ref: '#/components/schemas/PlaylistTagFilter'
            custom_param_filter:
              $ref: '#/components/schemas/PlaylistCustomParamFilter'
            media_filter:
              type: object
              properties:
                limit:
                  $ref: '#/components/schemas/PlaylistLimit'
            pinning:
              $ref: '#/components/schemas/PlaylistPinning'
            recency:
              $ref: '#/components/schemas/PlaylistRecency'
    WebhookResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the individual webhooks of an account
          properties:
            metadata:
              $ref: '#/components/schemas/WebhookResourceMetadata'
    WebhookResourceReadCreate:
      allOf:
        - $ref: '#/components/schemas/WebhookResourceRead'
        - properties:
            secret:
              type: string
              description: Shared secret used for verifying authenticity of webhook
    WebhookResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            webhooks:
              type: array
              items:
                $ref: '#/components/schemas/WebhookResourceRead'
    WebhookResourceMetadata:
      type: object
      properties:
        webhook_url:
          type: string
          description: Valid HTTPS endpoint to be notified upon event(s) occurring
          pattern: ^https://
        events:
          type: array
          description: Subscribed events that trigger a notification
          items:
            $ref: '#/components/schemas/WebhookEvent'
          minItems: 1
          uniqueItems: true
        name:
          type: string
          description: Display name for webhook subscription
          maxLength: 124
        description:
          type: string
          description: Description for the webhook subscription
          maxLength: 355
        site_ids:
          type: array
          description: |
            List of site IDs corresponding to the webhook

            Each site ID is the unique identifier for each property. You can specify any number of site IDs in this array.
          items:
            $ref: '#/components/schemas/ResourceId'
          minItems: 1
          uniqueItems: true
      required:
        - webhook_url
        - events
        - name
        - site_ids
    WebhookEvent:
      type: string
      description: Occurrences which can be used to trigger a webhook
      enum:
        - channel_active
        - channel_created
        - channel_idle
        - conversions_complete
        - media_available
        - media_deleted
        - media_reuploaded
        - media_updated
        - thumbnail_created
        - thumbnail_deleted
        - track_created
        - track_deleted
        - media_created
        - stream_created
        - stream_transitioned
        - stream_go_live
        - stream_updated
        - stream_deleted
    MediaResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/MediaResourceMetadata'
            relationships:
              type: object
              properties:
                protection_rule:
                  $ref: '#/components/schemas/RelationshipRead'
            status:
              description: Media upload status
              type: string
              enum:
                - created
                - processing
                - ready
                - updating
                - failed
              example: ready
            media_type:
              type: string
              enum:
                - audio
                - video
              example: video
            hosting_type:
              description: Indicates whether or not the media is hosted with JW Player or not
              type: string
              enum:
                - external
                - hosted
              example: hosted
            mime_type:
              type: string
              enum:
                - video/mp4
                - video/webm
                - video/flv
                - audio/aac
                - audio/mpeg
                - audio/ogg
                - application/vnd.apple.mpegurl
                - application/smil+xml
                - application/dash+xml
                - video/flash
            error_message:
              description: Message describing an issue uploading or processing the media
              type: string
              example: Something went wrong!
            external_id:
              type: string
              description: >-
                Non-JWP ID for the media

                A maximum of 64 characters is permitted.
              example: myvideo123
            duration:
              description: Length of the media in seconds
              type: number
              example: 437
            trim_in_point:
              type: string
              description: Starting point to trim the video
              example: 00:00:01
            trim_out_point:
              type: string
              description: Ending point to trim the video
              example: "00:01:00.123"
    MediaResourceReadCreate:
      allOf:
        - $ref: '#/components/schemas/MediaResourceRead'
        - type: object
          properties:
            upload_link:
              description: URL to be used for S3 uploads
              type: string
    MediaResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            media:
              type: array
              items:
                $ref: '#/components/schemas/MediaResourceRead'
    MediaResourceMetadata:
      type: object
      properties:
        title:
          type: string
          description: >-
            A maximum of 5000 characters is permitted.
          example: My Media Title
        description:
          type: string
          description: >-
            A maximum of 25000 characters is permitted.
          example: My media description
        author:
          type: string
          description: >-
            A maximum of 256 characters is permitted.
          example: Jane Doe
        duration:
            type: number
            description: >-
              Length of the media in seconds

              This can only be defined manually for externally hosted media. The `duration` is set automatically for hosted media.
        permalink:
          description: >-
            URL of the page where this media is published

            A maximum of 2048 characters is permitted.
          type: string
          example: 'http://www.mysite.com'
        category:
          description: IAB category
          type: string
          enum:
            - 'Automotive'
            - 'Books and Literature'
            - 'Business and Finance'
            - 'Careers'
            - 'Education'
            - 'Events and Attractions'
            - 'Family and Relationships'
            - 'Fine Art'
            - 'Food & Drink'
            - 'Healthy Living'
            - 'Hobbies & Interests'
            - 'Home & Garden'
            - 'Medical Health'
            - 'Movies'
            - 'Music and Audio'
            - 'News and Politics'
            - 'Personal Finance'
            - 'Pets'
            - 'Pop Culture'
            - 'Real Estate'
            - 'Religion & Spirituality'
            - 'Science'
            - 'Shopping'
            - 'Sports'
            - 'Style & Fashion'
            - 'Technology & Computing'
            - 'Television'
            - 'Travel'
            - 'Video Gaming'
          example: Automotive
        publish_start_date:
          description: Start date and time in ISO 8601 format when media is available for streaming
          type: string
          format: date-time
          example: '2018-10-03T21:19:36.602019+00:00'
        publish_end_date:
          description: End date and time in ISO 8601 format when media is no longer available for streaming
          type: string
          format: date-time
          example: '2018-10-03T21:19:36.602019+00:00'
        tags:
          description: |
            User-generated labels used to classify a video

            Tags are case sensitive, and trailing whitespace is removed.

            When defining `tags`, include all the `tags` that should be associated with the target resource.
            
            When updating existing `tags`, include those already in use. Any `tags` not included within the updated `tags` in the request body will be deleted.
          type: array
          items:
            type: string
          example: [test1, happy1, one, two, four]
        language:
          description: >-
            Two-letter [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) language code for the
            media

            This is used to index the media by language, to provide relevant playlist recommendations.
          allOf:
            - $ref: '#/components/schemas/Language'
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
    MediaResourceCreateOnlyMetadata:
      type: object
      properties:
        external_id:
          type: string
          description: >-
            ID for the media, generated by a non-JW Player platform or program

            A maximum of 64 characters is permitted.
          example: myvideo123
    MediaResourceCreateMetadata:
      allOf:
        - $ref: '#/components/schemas/MediaResourceMetadata'
        - $ref: '#/components/schemas/MediaResourceCreateOnlyMetadata'
    MediaResourceUploadMetadata:
      type: object
      description: >-
        Metadata describing the upload method and information required to process the upload
      properties:
        method:
          description: |
            Upload method

            **Possible values**:
            - `direct`: Can upload media files up to **5GB** and on a local machine

            - `external`: Use for registering **self-hosted** content with your JW Player account

            - `fetch`: Can upload media files up to **100GB** and hosted on another platform (**only** if using the v2 Management API)

            - `multipart`: Can upload media files up to **100GB** and on a local machine (**only** if using the v2 Management API)
          type: string
          enum:
          - fetch
          - direct
          - multipart
          - external
        mime_type:
          description: MIME type for the uploaded media, required for the `external` upload method
          type: string
          enum:
            - video/mp4
            - video/webm
            - video/flv
            - audio/aac
            - audio/mpeg
            - audio/ogg
            - application/vnd.apple.mpegurl
            - application/smil+xml
            - application/dash+xml
            - video/flash
        source_url:
          description: URL of the external media, required for the `external` upload method
          type: string
        download_url:
          description: |
            URL of the media to fetch

            This is **required** for the `fetch` upload method
        trim_in_point:
          type: string
          description: Starting point to trim the video, not applicable to the `external` upload method
          example: 00:00:01
        trim_out_point:
          type: string
          description: Ending point to trim the video, not applicable to the `external` upload method
          example: "00:01:00.123"
    MediaRenditionResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          description: Response for retrieving a list of media renditions of a media
          properties:
            media_renditions:
              type: array
              items:
                $ref: '#/components/schemas/MediaRenditionResource'
    MediaRenditionResource:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for a media's renditions
          additionalProperties: false
          properties:
            metadata:
              type: object
              additionalProperties: false
            relationships:
              type: object
              properties:
                media_rendition_template:
                  $ref: '#/components/schemas/RelationshipRead'
            height:
              type: integer
              example: 480
            width:
              type: integer
              example: 720
            format:
              type: string
              description: Extension format of the rendition
            delivery_url:
              type: string
              description: >-
                URL to access the media rendition

                This URL is only returned when the media rendition status is `ready`.
            error_message:
              type: string
              description: A human-readable error message for describing failures
            status:
              type: string
              example: ready
              enum:
                - failed
                - processing
                - ready
            filesize:
              type: integer
              description: Size of the media rendition, in bytes
    AdScheduleResourceMetadata:
      type: object
      required:
        - breaks
        - client
      properties:
        name:
          type: string
          description: Name of advertising schedule
        breaks:
          type: array
          items:
            type: object
            maxItems: 15
            required:
              - offset
              - tags
              - type
            properties:
              tags:
                type: array
                description: |
                  List of ad tag URLs

                  Only one ad tag is allowed for googima (Google IMA) client.
                items:
                  type: string
                  description: |
                     URL of the ad tag

                     The ad tag type must match the ad client.
                  example: "http://doubleclick.com/tag1.xml"
              offset:
                type: string
                description:  >-
                  Location in the video where an ad break occurs

                  Multiple ad breaks cannot share the same offset.

                  Possible values:
                  - `pre`
                  - `post`
                  - Seconds into video
                  - % of video. Available only for VAST client.
                  - Timecode (hh:mm:ss:mmm)
              skipoffset:
                type: integer
                description: |
                  Length of time in seconds a viewer must watch an ad before having the ability to skip the ad

                  Available only for VAST client.
              type:
                type: string
                description: |
                  Format of the ad to be served within the ad break

                  Possible values:
                  - `linear`: Video ad that interrupts video content playback
                  - `nonlinear`: Static display ad that overlays a portion of the player and does not interrupt playback. No advertisting cuepoint is shown for this ad break.
                  nonlinear allows an ad banner to display over video content without disrupting the video.
                enum:
                  - linear
                  - nonlinear
        bids:
          $ref: '#/components/schemas/BidsResourceMetadata'
        rules:
          type: object
          properties:
            startOn:
              type: integer
              minimum: 1
              description: |
                First playlist item allowing ad playback

                For example, if you want viewer Mary to watch her first ad before the second video in a playlist, you would configure this setting to 2.  Mary will see no ads before the first video she watches.
            frequency:
              type: integer
              minimum: 0
              description: |
                Regularity of ads within a playlist

                For example, if `frequency: 3`, ads play before every third playlist item.

                Use `0` to only play ads on the first playlist item.
            timeBetweenAds:
              type: integer
              minimum: 0
              description: |
                Minimum time in seconds that must elapse after displaying an ad in a schedule before playing the next scheduled ad

                Available only for VAST client.
            startOnSeek:
              type: string
              description: |
                Setting that defines the ad a returning visitor is served when resuming previously-watched video content

                Available only for VAST client.
              enum:
                - mid
                - none
                - pre
        client:
          type: string
          description: Ad client that will be used to display advertisements
          enum:
            - vast
            - googima
        is_vmap:
          type: boolean
          description: VMAP
          default: false
        vpaidmode:
          type: string
          description: >-
             Permitted VPAID functionality

             Possible values:
             - `insecure`: VPAID ad will load in a friendly iFrame. This allows the ad access to the site via javascript.
             - `enabled`: VPAID ad is enabled using a cross domain iFrame. VPAID ad cannot access the site. A VPAID ad that depends on friendly iFrame access may not play.
             - `disabled`: VPAID ad will not play and an error will be returned if VPAID ad is requested.
          enum:
            - enabled
            - disabled
            - insecure
        version:
          type: string
          description: Version
    MediaProtectionRuleResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          description: Response for retrieving a list of media protection rules of an account
          properties:
            media_protection_rules:
              type: array
              items:
                $ref: '#/components/schemas/MediaProtectionRuleResourceRead'
    MediaProtectionRuleResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the individual media protection rules of an account
          properties:
            metadata:
              $ref: '#/components/schemas/MediaProtectionRuleResourceCreateMetadata'
    SiteProtectionRuleResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the site protection rule
          properties:
            metadata:
              $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata'
    SiteProtectionRuleResourceMetadata:
      type: object
      description: Metadata allowed when updating a site protection rule
      properties:
        rule_type:
          type: string
          description: Determines whether listed `countries` are included or excluded from viewing content
          enum:
            - allow
            - deny
        countries:
          type: array
          description: |
            List of countries that are applicable to the protection rule

            Countries are specified using two-letter country codes as defined in ISO 3166.
          items:
            type: string
            enum:
              - AD
              - AE
              - AF
              - AG
              - AI
              - AL
              - AM
              - AO
              - AQ
              - AR
              - AS
              - AT
              - AU
              - AW
              - AX
              - AZ
              - BA
              - BB
              - BD
              - BE
              - BF
              - BG
              - BH
              - BI
              - BJ
              - BL
              - BM
              - BN
              - BO
              - BQ
              - BR
              - BS
              - BT
              - BV
              - BW
              - BY
              - BZ
              - CA
              - CC
              - CD
              - CF
              - CG
              - CH
              - CI
              - CK
              - CL
              - CM
              - CN
              - CO
              - CR
              - CU
              - CV
              - CW
              - CX
              - CY
              - CZ
              - DE
              - DJ
              - DK
              - DM
              - DO
              - DZ
              - EC
              - EE
              - EG
              - EH
              - ER
              - ES
              - ET
              - FI
              - FJ
              - FK
              - FM
              - FO
              - FR
              - GA
              - GB
              - GD
              - GE
              - GF
              - GG
              - GH
              - GI
              - GL
              - GM
              - GN
              - GP
              - GQ
              - GR
              - GS
              - GT
              - GU
              - GW
              - GY
              - HK
              - HM
              - HN
              - HR
              - HT
              - HU
              - ID
              - IE
              - IL
              - IM
              - IN
              - IO
              - IQ
              - IR
              - IS
              - IT
              - JW
              - JM
              - JO
              - JP
              - KE
              - KG
              - KH
              - KI
              - KM
              - KN
              - KP
              - KR
              - KW
              - KY
              - KZ
              - LA
              - LB
              - LC
              - LI
              - LK
              - LR
              - LS
              - LT
              - LU
              - LV
              - LY
              - MA
              - MC
              - MD
              - ME
              - MF
              - MG
              - MH
              - MK
              - ML
              - MM
              - MN
              - MO
              - MP
              - MQ
              - MR
              - MS
              - MT
              - MU
              - MV
              - MW
              - MX
              - MY
              - MZ
              - NA
              - NC
              - NE
              - NF
              - NG
              - NI
              - NL
              - NO
              - NP
              - NR
              - NU
              - NZ
              - OM
              - PA
              - PE
              - PF
              - PG
              - PH
              - PK
              - PL
              - PM
              - PN
              - PR
              - PS
              - PT
              - PW
              - PY
              - QA
              - RE
              - RO
              - RS
              - RU
              - RW
              - SA
              - SB
              - SC
              - SD
              - SE
              - SG
              - SH
              - SI
              - SJ
              - SK
              - SL
              - SM
              - SN
              - SO
              - SR
              - SS
              - ST
              - SV
              - SX
              - SY
              - SZ
              - TC
              - TD
              - TF
              - TG
              - TH
              - TJ
              - TK
              - TL
              - TM
              - TN
              - TO
              - TR
              - TT
              - TV
              - TW
              - TZ
              - UA
              - UG
              - UM
              - US
              - UY
              - UZ
              - VA
              - VC
              - VE
              - VG
              - VI
              - VN
              - VU
              - WF
              - WS
              - YE
              - YT
              - ZA
              - ZM
              - ZW
    MediaProtectionRuleResourceCreateMetadata:
      type: object
      description: Metadata allowed when creating a media protection rule
      properties:
        name:
          type: string
          description: >-
            Name of the media protection rule

            A maximum of 64 characters is permitted.
        rule_type:
          $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata/properties/rule_type'
        countries:
          $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata/properties/countries'
      required:
        - name
        - rule_type
        - countries
    MediaProtectionRuleResourceUpdateMetadata:
      type: object
      description: Metadata allowed when updating a media protection rule
      properties:
        name:
          $ref: '#/components/schemas/MediaProtectionRuleResourceCreateMetadata/properties/name'
        rule_type:
          $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata/properties/rule_type'
        countries:
          $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata/properties/countries'
    PbConfigResourceMetadata:
      type: object
      properties:
        bids:
          $ref: '#/components/schemas/BidsResourceMetadata'
    BidsResourceMetadata:
      type: object
      required:
        - bidders
      properties:
        settings:
          $ref: '#/components/schemas/BidSettingsResourceMetadata'
        bidders:
          $ref: '#/components/schemas/BiddersResourceMetadata'
    BiddersResourceMetadata:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: |
            Ad partner from which the bid is received
          enum:
            - jwdemand
            - Adtelligent
            - AppNexus
            - Axonix
            - criteo
            - EMX
            - improvedigital
            - IndexExchange
            - kargo
            - MediaGrid
            - MediaNet
            - OpenX
            - PubMatic
            - Rubicon
            - SmartAdServer
            - Sonobi
            - Sovrn
            - SpotX
            - SynacorMedia
            - TheTradeDesk
            - Unruly
            - VideoByte
            - YahooSSP
        id:
          type: string
          description:  Identifier issued by the bidding partner that represents a segment of a publisher's inventory
        pubid:
          type: string
          description: Identifier issued by an ad partner that represents the publisher
        custom_params:
          $ref: '#/components/schemas/CustomParamSchema'
    BidSettingsResourceMetadata:
      type: object
      properties:
        bidTimeout:
          type: integer
          description: Timeout for bid response from when the bid request occurs, in milliseconds
        floorPriceCents:
          type: integer
          description: |
            Price in cents (CPM) that a bid has to beat in order to win

            This property must be set when mediationLayerAdServer is set to jwp or jwpdfp.

            NOTE: Determining the best floor price depends upon various factors. If you need assistance determining the best floor price, please consult with your JW Player representative or SSP partner.
        mediationLayerAdServer:
          type: string
          description: |
            Mediation layer that decides which ad runs

            Possible values:
            - `dfp`: (IMA) No auction is conducted by the player. All bids are sent to Google Ad Manager (GAM, formerly known as DFP) and rendered as line items that compete against other line items. GAM serves the winning line item. We recommend setting `buckets` to minimize the number of line items that you must set up in GAM.

            - `jwp`: (VAST/IMA) An auction is conducted by the player. If a winner is selected, the winner's ad is called. If no winner is selected, the fallback tag is called. **You must specify a floor price.**

            - `jwpdfp`: (IMA) An initial auction is conducted by the player. If a winner is selected, the winner's ad will is called. If no winner is selected, the fallback tag is called to serve. If no winner is selected for any reason, all valid bids are sent to Google Ad Manager (GAM, formerly known as DFP) where the bid values are rendered as line items to compete against other line items. The winning line item is served by GAM. **You must set `floorPriceCents`. We recommend setting `buckets` to minimize the number of line items that you must set up in GAM**.

            - `jwpspotx`: (VAST) No auction is conducted by the player. The player asks SpotX for a bid and calls the returned ad response regardless of price. This option is equivalent to using JW Player mediation with a $.01 floor price. **You must set up [SpotX line items](https://developer.spotxchange.com/content/local/docs/HeaderBidding/lisa.md).**
          enum:
            - dfp
            - jwp
            - jwpdfp
            - jwpspotx
        buckets:
          type: array
          description: |
             Ranges of bid prices

             When using buckets, bid prices sent to GAM are rounded down to the closest specified increment. Price buckets are helpful to reduce the number of line items in GAM. Without price buckets, one line item per one-cent increment is required.
             This property only applies when `dfp` or `jwpdfp` (only for the GAM portion of the mediation) is selected as the `mediationLayerAdServer`.
          items:
              type: object
              properties:
                min:
                  type: number
                  description: Minimum value of a price bucket, in bidding currency
                max:
                  type: number
                  description: Maximum value of a price bucket, in bidding currency
                increment:
                  type: number
                  description: Nearest increment to which a bid is rounded down, in bidding currency
        consentManagement:
          type: object
          description: Consent management for EU General Data Protection Regulation (GDPR) and California Consumer Privacy Act (CCPA)
          properties:
            gdpr:
              type: object
              description: |
                Consent management module designed to support GDPR

                More information can be found [here](https://docs.prebid.org/dev-docs/modules/gdprEnforcement.html).
              properties:
                cmpApi:
                  type: string
                  enum:
                    - iab
                    - static
                  default: iab
                  description: CMP interface that is in use
                timeout:
                  type: integer
                  description: Length of time (in milliseconds) to allow the CMP to obtain the GDPR consent string
                defaultGdprScope:
                  type: boolean
                  description: Defines what the `gdprApplies` flag should be when the CMP doesn’t respond in time or the static data doesn’t supply
                rules:
                  type: array
                  description: |
                    GDPR Enforcement Module which allows the page to define which activities should be enforced at the Prebid.js level and actively enforces those activities based on user consent data

                    Only used with TCF v2.0

                    More information can be found [here](https://docs.prebid.org/dev-docs/modules/gdprEnforcement.html)
                  items:
                    type: object
                    required:
                      - purpose
                    properties:
                      purpose:
                        type: string
                        enum:
                          - basicAds
                          - measurement
                          - storage
                        description: TCF Legal Basis to be enforced or not
                      enforcePurpose:
                        type: boolean
                        description: Determines whether to enforce the purpose consent
                      enforceVendor:
                        type: boolean
                        description: Determines whether to enforce vendor signals for this purpose
                      vendorExceptions:
                        type: array
                        items:
                          type: string
                          description: Defines a list of bidders that are exempt from the enforcement of this purpose
                allowAuctionWithoutConsent:
                  type: boolean
                  description: |
                    Determines what will happen if obtaining consent information from the CMP fails; either allow the auction to proceed (`true`) or cancel the auction (`false`).

                    Only used with TCF v1.1
            usp:
              type: object
              description: |
                Consent management module designed to support the CCPA, referred to as “US Privacy” (USP)

                More information can be found [here](https://docs.prebid.org/dev-docs/modules/consentManagementUsp.html).
              properties:
                cmpApi:
                  type: string
                  enum:
                    - iab
                    - static
                  default: iab
                  description: CMP interface that is in use
                timeout:
                  type: integer
                  description: Length of time (in milliseconds) to allow the USP-API to obtain the CCPA string
    AdScheduleResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the individual advertising schedule of a site
          properties:
            metadata:
              $ref: '#/components/schemas/AdScheduleResourceMetadata'
    AdScheduleResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            schedules:
              type: array
              items:
                $ref: '#/components/schemas/AdScheduleResourceRead'
    PbConfigResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the individual PB configurations of a site
          properties:
            metadata:
              $ref: '#/components/schemas/PbConfigResourceMetadata'
    PbConfigResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            player_bidding_configs:
              type: array
              items:
                $ref: '#/components/schemas/PbConfigResourceRead'
    ReportQueryRequest:
      type: object
      properties:
        dimensions:
          description: Dimensions to include in the report query response
          items:
            type: string
          type: array
        end_date:
          description: |
            Last date of a query date range in `YYYY-MM-DD` format

            This date is based on UTC -4/ UTC -5. Time zone is affected by whether daylight saving time or standard time is in effect.
          type: string
        filter:
          description: Defines how to restrict the data returned in the response
          items:
            $ref: '#/components/schemas/ReportRequestFilters'
          type: array
        include_metadata:
          description: |
            Indicates that eligible dimensions are enriched with additional metadata

            Depending on the dimension, enriched metadata appears either in the `includes` or `metadata.name` object of the query response.

            This feature requires an Enterprise account.

            **Possible Values**:
            - `0`: Do not include enriched metadata
            - `1`: Include enriched metadata

            Default: `0`
          type: integer
        metrics:
          description: Metrics to include in the report query response
          items:
            $ref: '#/components/schemas/ReportRequestMetrics'
          type: array
        page:
          description: |
            Index of the page of results

            The value of the first page of results is `0`. The number of total pages is inversely related to the `page_length`.
          type: integer
        page_length:
          description: |
            (JSON only) Total number of records returned on each page of results
            
            If not set, the default value is `10`. This value must be ≤ 100.
          type: integer
        relative_timeframe:
          description: Preconfigured time range for a report query
          type: string
          enum:
            - "7 Days"
            - "30 Days"
            - "90 Days"
            - "Last Quarter"
            - "Month To Date"
            - "Today"
            - "Yesterday"
        sort:
          description: Defines the field by which to sort the data and the order of the sort
          items:
            $ref: '#/components/schemas/ReportRequestSorts'
          type: array
        start_date:
          description: |
            First date of a query date range in `YYYY-MM-DD` format

            This date is based on UTC -4/ UTC -5. Time zone is affected by whether daylight saving time or standard time is in effect.
          type: string
      required:
        - start_date
        - end_date
        - metrics
    ReportRequestFilters:
      type: object
      properties:
        field:
          description: |
            Dimension `dimension_id` by which to restrict the returned data set

            When filtering JWP Data, all `dimension_id` variables can be used.

            When filtering OTT Data, only the following `dimension_id` variables can be used:

            - `country_code`
            - `eastern_date`
            - `media_id`
            - `platform_id`
            - `playlist_id`
            - `playlist_type`
            - `tag`
            - `upload_date`
            - `video_duration`
          type: string
        operator:
          description: |
            Filter-matching behavior

            Possible values include the following:
            - `=`: Use this operator when the value is an ID.
            - `!=`: Use this operator when the value is an ID.
            - `LIKE`: Use this operator when the value is metadata information.
            - `!LIKE`: Use this operator when the value is metadata information.
          type: string
          enum:
            - "="
            - "!="
            - "LIKE"
            - "!LIKE"
        value:
          description: Value of specific dimension by which to restrict the returned data set
          type: array
          items:
            type: string
      required:
        - field
        - operator
        - value
    ReportRequestMetrics:
      type: object
      properties:
        field:
          description: Metric to include in the report query response
          type: string
        operation:
          description: Calculation applied to selected metric
          type: string
          enum:
            - max
            - min
            - sum
      required:
        - field
        - operation
    ReportRequestSorts:
      type: object
      properties:
        field:
          description: |
            Metric or dimension by which the response query is organized
            
            The metric or dimension must be one of the metrics and dimensions included in the report query body.
          type: string
        operation:
          type: string
          description: |
            Operation to be applied to the data being sorted
            
            **Default**: `sum`
          enum:
            - max
            - min
            - sum
        order:
          description: Manner in which response query is organized
          type: string
          enum:
            - ASCENDING
            - DESCENDING
      required:
        - field
        - order
    ReportQueryResponse:
      type: object
      properties:
        data:
          description: Values for each `metadata.column_headers` property
          $ref: '#/components/schemas/ReportDataFields'
        metadata:
          $ref: '#/components/schemas/ReportMetadataFields'
        page:
          type: integer
          description: |
            Index of the page of results

            The value of the first page of results is `0`. The number of total pages is inversely related to the `page_length`.
        page_length:
          description: |
            (JSON only) Total number of records returned on each page of results
            
            If not set, the default value is `10`. This value must be ≤ 100.
          type: integer
        type:
          type: string
        includes:
          $ref: '#/components/schemas/ReportIncludes'
    ReportDataFields:
      type: object
      properties:
        rows:
          items: {}
          type: array
          description: Individual result with values for each `metadata.column_headers` property
    ReportMetadataFields:
      type: object
      properties:
        column_headers:
          description: Category of column data
          $ref: '#/components/schemas/ReportColumnHeaders'
        name:
          description: Object of identifier-to-name pairings
          $ref: '#/components/schemas/ReportMetadataName'
        end_date:
          description: Last date of a query date range in `YYYY-MM-DD` format
          type: string
        start_date:
          description: First date of a query date range in `YYYY-MM-DD` format
          type: string
    ReportColumnHeaders:
      type: object
      properties:
        dimensions:
          description: Set of objects for each dimension included in the report query
          items:
            $ref: '#/components/schemas/ReportColumnHeadersDimensions'
          type: array
        metrics:
          description: Set of objects for each metric included in the report query
          items:
            $ref: '#/components/schemas/ReportColumnHeadersMetrics'
          type: array
    ReportColumnHeadersDimensions:
      type: object
      properties:
        display:
          description: Human-readable name of the dimension
          type: string
        field:
          description: The `dimension_id` value
          type: string
        type:
          description: Format of the data that is returned
          type: string
    ReportColumnHeadersMetrics:
      type: object
      properties:
        display:
          description: Human-readable name of the metric
          type: string
        field:
          description: The `metric_id` value
          type: string
        units:
          description: Format of the data that is returned
          type: string
    ReportMetadataName:
      type: object
      properties:
        city:
          type: object
          description: |
            When `include_metadata: 1` and `dimensions: ["city"]` are part of the API query, an object of identifier-to-name pairings

            **Example**: `"city": {"Brussels BRU BE": "Brussels - Brussels Capital (Belgium)"}`
        country_code:
          type: object
          description: |
            When `include_metadata: 1` and `dimensions: ["country_code"]` are part of the API query, an object of identifier-to-name pairings

            **Example**: `"country_code": {"HU": "Hungary", "NL": "Netherlands"}`
        device_id:
          type: object
          description: |
            When `include_metadata: 1` and `dimensions: ["device_id"]` are part of the API query, an object of identifier-to-name pairings

            **Example**: `"device_id": {"Desktop": "Desktop", "Phone": "Phone"}`
        platform_id:
          type: object
          description: |
            When `include_metadata: 1` and `dimensions: ["platform_id"]` are part of the API query, an object of identifier-to-name pairings

            **Example**: `"platform_id": {"web": "Web"}`
    ReportIncludes:
      type: object
      properties:
        (object_id):
          description: |
            Unique identifier for one of the following returned types:

            - `ad_schedule_id`
            - `media_id`
            - `playlist_id`
            - `player_id`
          type: object
          properties:
            (metadata):
              description: |
                Object of identifier-to-name pairings based upon the dimension included with `include_metadata: 1` in the request

                Identifier-to-name pairing by dimension:


                - `dimensions: ["ad_schedule_id"]`: Object includes:
                  - `name`: User-generated name of the ad schedule

                - `dimensions: ["media_id"]`: Object includes:
                  - `duration_bucket`: Categorization of video duration
                  - `tags`: Metadata tags associated with the media item
                  - `title`: Name of the media item
                  - `upload_date`: Date when the media item was uploaded in `YYYY-MM-DD` format

                - `dimensions: ["player_id"]`: Object includes:
                  - `name`: User-generated name of the player

                - `dimensions: ["playlist_id"]`: Object includes:
                  - `title`: Name of the media item
                  - `type`: Type of playlist
              type: string
        type:
          description: |
            Dimension to which the unique ID belongs

            Possible values include:
            - `ad_schedule_id`
            - `media_id`
            - `player_id`
            - `playlist_id`
          type: string
    UploadPartResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            parts:
              type: array
              items:
                $ref: '#/components/schemas/UploadPartResourceRead'
    UploadPartResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: "A part representing a byte segement of a file for a multipart upload"
        - oneOf:
          - type: object
            properties:
              etag:
                type: string
                description: >
                  Unique MD5 hash representing the uploaded data for this chunk

                  The presence of this field indicates the upload of this part was completed.

                example: 3f2dde2b2b615a962c2dfabc89a453cd
          - type: object
            properties:
              upload_link:
                type: string
                description: >
                  Upload URL for this part

                  A `PUT` request to the link with the raw bytes will result in the part transitioning to a
                  completed state (the `etag` field will be present on the resource).

                  The presence of this field indicates the part has not yet been uploaded.
                example: http://jwplayer-upload.s3-accelerate.amazonaws.com/asdf1234?uploadId=asdfasdf&partNumber=1&AWSAccessKeyId=awsaccesskeyid&Signature=qwerasdfzxcv&Expires=1607530054
    OriginalResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            status:
              description: Original status
              type: string
              enum:
                - created
                - failed
                - processing
                - ready
                - updating
            error_message:
              description: |
                Human-readable message explaining an issue uploading or processing an original

                This property is only displayed when `"status": "failed"`.
              type: string
            size:
              description: Size of the original in bytes
              type: string
            container_format:
              description: File format containing the media compressed by means of standardized audio/video codecs
              type: string
              example: mp4
            md5:
              description: MD5 hash of the asset, stored as 32-character hexadecimal string
              type: string
            original_type:
              description: |
                Identifies if the uploaded file is a video file (`primary`) or an alternate audio track file (`secondary`)
              enum:
                - primary
                - secondary
            metadata:
              $ref: '#/components/schemas/OriginalMetadata'
    OriginalResourceReadCreate:
      allOf:
        - $ref: '#/components/schemas/OriginalResourceRead'
        - anyOf:
          - type: object
            properties:
              upload_token:
                type: string
                description: |
                  Authentication used for multipart upload endpoints

                  Only returned when `upload.method` is `multipart`
              upload_id:
                type: string
                description: |
                  Unique identifier for the upload

                  Only returned when `"upload.method": "multipart"`.
          - type: object
            properties:
              upload_link:
                type: string
                description: |
                  URL to be used for S3 uploads

                  Only returned when `upload.method` is `direct`
    OriginalResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            originals:
              type: array
              items:
                $ref: '#/components/schemas/OriginalResourceRead'
    OriginalMetadata:
      type: object
      properties:
        name:
          description: Name of the original and fallback name of associated audio tracks.
          type: string
        type:
          description: |
            ([Alternate audio tracks](https://developer.jwplayer.com/jwplayer/docs/stream-manage-alternate-audio-tracks) only) Represents the purpose or content of the audio track and is the fallback type of associated audio tracks.

            **Possible values**:
            - `audio-description`: Audio descriptions of what is happening in the video

            - `commentary`: Commentary to accompany the video

            - `language`: Alternate language option than the one already present in the video

            - `music`: Alternate music selection

            - `other`: Anything else
          enum:
            - audio-description
            - commentary
            - language
            - music
            - other
        language:
          description: >-
            Language dialect of the original resource and fallback language of associated audio tracks.

            When a `name` is not provided, `language` is used as the audio label

            Set to `English` as default on non-music type resources
          type: string
        language_code:
          description: >-
           [ISO 639-1 language code](https://id.loc.gov/vocabulary/iso639-1.html) of the original and fallback language code of associated audio tracks.

            This is set to `en` as default for non-music type resources
          type: string
    AudioTrackResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/AudioTrackMetadata'
    AudioTrackResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            originals:
              type: array
              items:
                $ref: '#/components/schemas/AudioTrackResourceRead'
    AudioTrackMetadata:
      type: object
      properties:
        name:
          description: Name of the audio track
          type: string
        type:
          description: |
            ([Alternate audio tracks](https://developer.jwplayer.com/jwplayer/docs/stream-manage-alternate-audio-tracks) only) Represents the purpose or content of the audio track

            **Possible Values**:
            - `audio-description`: Audio descriptions of what is happening in the video
            - `commentary`: Commentary to accompany the video
            - `language`: Alternate language option than the one already present in the video
            - `music`: Alternate music selection
            - `other`: Anything else
          enum:
            - audio-description
            - commentary
            - language
            - music
            - other
        language:
          description: >-
            Language dialect of the audio track
            When a `name` is not provided, `language` is used as the audio label
          type: string
        language_code:
          description: >-
           [ISO 639-1 language code](https://id.loc.gov/vocabulary/iso639-1.html) of the audio track
          type: string
    DRMPolicyResourceRead:
      allOf:
        - $ref: '#/components/schemas/ResourceRead'
        - type: object
          description: Resource for managing the individual DRM policies of a site
          properties:
            metadata:
              $ref: '#/components/schemas/DRMPolicyMetadata'
    DRMPolicyMetadata:
      type: object
      properties:
        name:
          type: string
          description: >
            Common name for the DRM policy

            A maximum of 50 characters is permitted.
          example: Low
        max_width:
          type: integer
          description: Max rendition width the DRM policy allows to be streamed
          minimum: 0
          maximum: 16000
          example: 720
        widevine_security:
          type: string
          enum:
            - hw_secure_all
            - hw_secure_crypto
            - hw_secure_decode
            - sw_secure_crypto
            - sw_secure_decode
          example: sw_secure_crypto
        playready_security:
          type: integer
          enum:
            - 2000
            - 3000
          example: 2000
        allow_offline_persistence:
          type: boolean
          description: Whether DRM policy allows content to be stored on devices and played back offline
          example: false
        digital_output_protection:
          type: string
          description: HDCP requirement
          enum:
            - never_allowed
            - not_required
            - require_hdcp_v1
            - require_hdcp_v2
            - require_hdcp_v2.1
            - require_hdcp_v2.2
          example: not_required
        license_duration:
          type: integer
          minimum: 0
          maximum: 3.154e7
          description:
            Length of time for which the license is valid.

            A duration of '0' represents a non-expiring license.
          example: 300
        playback_duration:
          type: integer
          minimum: 0
          maximum: 3.154e7
          description:
            Length of time during playback is supported.

            A duration of `0` represents infinite playback.
          example: 3600
    DRMPolicyResourcesRead:
      allOf:
        - $ref: '#/components/schemas/ResourcesRead'
        - type: object
          properties:
            drm_policies:
              type: array
              items:
                $ref: '#/components/schemas/DRMPolicyResourceRead'
    ErrorResponse:
      type: array
      description: One or many errors indicating that something prevented the request from being performed successfully
      items:
        type: object
        properties:
          code:
            description: Short machine-readable identifier for the error
            type: string
            example: error_code
          description:
            description: Human-readable message explaining the error
            type: string
            example: Something went wrong.
    MediaId:
      description: ID for Media Resource
      $ref: '#/components/schemas/ResourceId'
    PlaylistId:
      description: ID for a Playlist Resource
      $ref: '#/components/schemas/ResourceId'
    ResourceId:
      description: Unique identifier for a resource
      type: string
      minLength: 8
      maxLength: 8
      example: Ny05CEfj
      pattern: ^[A-Za-z0-9]+$
    ResourceRead:
      type: object
      properties:
        schema:
          type: string
          example: 'https://schema.jwplayer.com/types/thumbnail.json'
        id:
          $ref: '#/components/schemas/ResourceId'
        created:
          type: string
          description: Date and time at which the resource was created
          example: '2019-09-25T15:29:11.042095+00:00'
        last_modified:
          type: string
          description: Date and time at which the resource was most recently modified
          example: '2019-09-25T15:29:11.042095+00:00'
        type:
          type: string
          description: Name of the type of resource.
        relationships:
          type: object
          description: Ancilliary resources associated to the primary resource being read
    ResourcesRead:
      type: object
      properties:
        page:
          type: integer
          description: Offset for returned resources
          example: 1
        page_length:
          type: integer
          description: Maximum number of resources to return
          example: 10
        total:
          type: integer
          description: Number of resources available before pagination
          example: 1
    RelationshipRead:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
        type:
          type: string
          description: Resource type
    RelationshipWrite:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ResourceId'
      required:
        - id
    Relationships:
      type: array
      items:
        $ref: '#/components/schemas/RelationshipRead'
    Language:
      description: List of language codes to define a language. Uses ISO-639-1 language codes.
      type: string
      enum:
        - aa
        - ab
        - ae
        - af
        - ak
        - am
        - an
        - ar
        - as
        - av
        - ay
        - az
        - ba
        - be
        - bg
        - bh
        - bi
        - bm
        - bn
        - bo
        - br
        - bs
        - ca
        - ce
        - ch
        - co
        - cr
        - cs
        - cu
        - cv
        - cy
        - da
        - de
        - dv
        - dz
        - ee
        - el
        - en
        - eo
        - es
        - et
        - eu
        - fa
        - ff
        - fi
        - fj
        - fo
        - fr
        - fy
        - ga
        - gd
        - gl
        - gn
        - gu
        - gv
        - ha
        - he
        - hi
        - ho
        - hr
        - ht
        - hu
        - hy
        - hz
        - ia
        - id
        - ie
        - ig
        - ii
        - ik
        - io
        - is
        - it
        - iu
        - ja
        - jv
        - ka
        - kg
        - ki
        - kj
        - kk
        - kl
        - km
        - kn
        - ko
        - kr
        - ks
        - ku
        - kv
        - kw
        - ky
        - la
        - lb
        - lg
        - li
        - ln
        - lo
        - lt
        - lu
        - lv
        - mg
        - mh
        - mi
        - mk
        - ml
        - mn
        - mr
        - ms
        - mt
        - my
        - na
        - nb
        - nd
        - ne
        - ng
        - nl
        - nn
        - no
        - nr
        - nv
        - ny
        - oc
        - oj
        - om
        - or
        - os
        - pa
        - pi
        - pl
        - ps
        - pt
        - qu
        - rm
        - rn
        - ro
        - ru
        - rw
        - sa
        - sc
        - sd
        - se
        - sg
        - si
        - sk
        - sl
        - sm
        - sn
        - so
        - sq
        - sr
        - ss
        - st
        - su
        - sv
        - sw
        - ta
        - te
        - tg
        - th
        - ti
        - tk
        - tl
        - tn
        - to
        - tr
        - ts
        - tt
        - tw
        - ty
        - ug
        - uk
        - ur
        - uz
        - ve
        - vi
        - vo
        - wa
        - wo
        - xh
        - yi
        - yo
        - za
        - zh
        - zu
    AppConfigMetadata:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
          additionalProperties: false
          properties:
            ad_schedule:
              description: >
                Unique alphanumeric ID of an ad schedule
              type: string
              example: "5wRT89gf"
              default: null
            analytics_token:
              type: string
              description: Unique ID for analytics attached to a site
              example: lDdMCg7E_euMinvqc5Jccw
              default: null
            app_name:
              description: Name used for identifying an app config
              type: string
              example: "Apple TV (Production)"
            assets:
              allOf:
                -   $ref: '#/components/schemas/AppConfigAssets'
            content:
              items:
                $ref: '#/components/schemas/AppConfigContent'
              type: array
              description: List of playlists determining the shelves on the app homepage
            content_protection:
              type: object
              description: >
                Settings preventing unauthorized content use
              default: { }
              additionalProperties: false
              properties:
                access_model:
                  type: string
                  description: Monetization model determining access to content
                  enum: [ free, freeauth, authvod, svod ]
                drm:
                  type: object
                  additionalProperties: false
                  description: |
                    Default digital rights management policy setting preventing unauthorized content access
                    
                    This property depends on `access_model` being set.
                  properties:
                    default_policy_id:
                      type: string
            custom:
              type: object
              additionalProperties: true
              description: >
                User-generated key-value pairs
              example: { "yourKey": "yourValue", "foo": "BAR" }
              default: { }
            description:
              description: |
                Short description of the type of content in the app
                
                This description is used for SEO.
              type: string
              example: "1q2w3e4r"
            features:
              allOf:
                -   $ref: "#/components/schemas/AppConfigFeatures"
            integrations:
              allOf:
                -   $ref: '#/components/schemas/AppConfigIntegrations'
            menu:
              type: array
              items:
                allOf:
                  -   $ref: '#/components/schemas/AppConfigMenu'
            site_name:
              description: >
                Title displayed in the `<title>` element of the app
              type: string
              example: "Awesome Content"
            styling:
              allOf:
                -   $ref: '#/components/schemas/AppConfigStyling'
            site_id:
              type: string
              description: Unique alphanumeric ID of the site to which the app config belongs
              example: "1q2w3e4r"
    AppConfigAssets:
      description: External resources to use with the app.
      type: object
      additionalProperties: false
      properties:
        banner:
          description: |
            Valid URL to a hosted image to use as a logo in the header of the app.
            
            When not provided, the default image is used.
          type: string
          example: "https://cdn.jwplayer.com/images/nwthWC1U.png"
    AppConfigContent:
      type: object
      description: >
        Use this object to define what content will be available in your app.
      additionalProperties: false
      required:
        - type
      properties:
        background_color:
          description: |
            App background color
            
            Use only a three-digit or six-digit [hex triplet](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet) value.
            
            When not provided, the default color is used.
          type: string
          example: "#FF0000"
        content_id:
          type: string
          description: >
            ID of the playlist containing content for a shelf

            This property is not applicable to Continue Watching or Favorites.
          example: "1q2w3e4r"
        enable_text:
          type: boolean
          description: >
            Determines if the title and description text overlays appear on poster images
          default: true
          example: true
        featured:
          type: boolean
          description: >
            Determines if content is prominently displayed
          default: false
          example: true
        image_label:
          type: string
          description: >
            Label of the image to display for this item
          example: hero
          default: null
        title:
          type: string
          description: |
            Name of the shelf in the app, overwriting the playlist title
            
            By default, each shelf inherits the title of the playlist
          example: Awesome Movies
          default: ""
        type:
          type: string
          enum:
            - continue_watching
            - favorites
            - playlist
          description: >
            Type of content
          example: playlist
          default: playlist
    AppConfigFeatures:
      additionalProperties: false
      description: An object that contains all site-wide Showcase settings.
      properties:
        continue_watching_list:
          description: >
            Unique alphanumeric ID of a Continue Watching watchlist
          type: string
          example: "1q2w3e4r"
        favorites_list:
          description: >
            Unique alphanumeric ID of a Favorites watchlist
          type: string
          example: "1q2w3e4r"
        recommendations_playlist:
          description: >
            Unique alphanumeric ID of a Recommendations playlist
          type: string
          example: "1q2w3e4r"
        search_playlist:
          description: >
            Unique alphanumeric ID of a search playlist
          type: string
          example: "1q2w3e4r"
      type: object
    AppConfigIntegrations:
      type: object
      description: Settings of supported integrations
      default: { }
      maxProperties: 1
      oneOf:
        - $ref: "#/components/schemas/AppConfigIntegrationsCleeng"
        - $ref: "#/components/schemas/AppConfigIntegrationsEmpty"
        - $ref: "#/components/schemas/AppConfigIntegrationsJwp"
    AppConfigIntegrationsEmpty:
      type: object
      properties:
        cleeng:
          type: object
          properties: { }
          not: { } # not allowed to be anything
        jwp:
          type: object
          properties: { }
          not: { } # not allowed to be anything
    AppConfigIntegrationsJwp:
      type: object
      properties:
        jwp:
          additionalProperties: false
          type: object
          properties:
            client_id:
              type: string
              format: string
              description: InPlayer account client ID
              example: c6f4002f-7415-4eb6-ab03-72b0f7aff0e8
            asset_id:
              type: integer
              description: ID that defines the subscription asset required to view content
              example: 115047
            use_sandbox:
              type: boolean
              example: true
              description: Determine whether the production or test (sandbox) environment is used
          required: [ clientId ]
      required: [ jwp ]
    AppConfigIntegrationsCleeng:
      type: object
      properties:
        cleeng:
          additionalProperties: false
          type: object
          properties:
            id:
              type: string
              format: string
              description: |
                Cleeng environment ID
                
                Enter this value to use Cleeng as a backend for account, subscription, and checkout functionality. 
                
                Omit this property to disable Cleeng functionality.
              example: addsfjadsfadfasdfasas
            monthly_offer:
              type: string
              format: string
              description: |
                Offer ID of a Cleeng monthly subscription 

                In addition to this parameter, Cleeng must be enabled (`cleeng.id`)  to show the **Payments and Subscription** functionality.

                Only the price, free day, and free period data are used from the Cleeng offer. The app does not verify the offer length.
              example: S345534153_NL
            use_sandbox:
              type: boolean
              example: true
              description: |
                Determines which Cleeng mediastore URL to use 
                
                **Possible Values**:
                - `false` | not defined: The Cleeng production URL is used (https://mediastore.cleeng.com).
                - `true`:  The Cleeng sandbox URL is used (https://mediastore-sandbox.cleeng.com). 
                
                This setting is ignored when Cleeng is not enabled (`cleeng.id`).
            yearly_offer:
              type: string
              format: string
              description: |
                Offer ID of a Cleeng yearly subscription 
                
                In addition to this parameter, Cleeng must be enabled (`cleeng.id`)  to show the **Payments and Subscription** functionality.
                
                Only the price, free day, and free period data are used from the Cleeng offer. The app does not verify the offer length.
              example: S346369153_NL
      required: [ cleeng ]
    AppConfigMenu:
      type: object
      additionalProperties: false
      description: Defines items added to the main menu
      required:
        - content_id
        - label
        - type
      properties:
        content_id:
          type: string
          description: Unique ID of the playlist to use for the menu page
          example: "a1B2cDEF"
        label:
          type: string
          description: |
            Label for the menu item
            
            This is the text users see in the menu.
          example: "All Movies"
        type:
          type: string
          enum:
            - playlist
          description: Type of content
          example: playlist
          default: playlist
        filter_tags:
          type: string
          description: >
            Comma-separated list of tags by which to filter the playlist defined by `playlist_id`
          example: "Action,Comedy,Drama,Sci-Fi"
          default: null
        image_label:
          type: string
          description: Label of the image to display for this item
          example: hero
          default: null
    AppConfigStyling:
      type: object
      additionalProperties: false
      description: >
        All settings for styling your web-app
      properties:
        background_color:
          description: >
            Override the theme's background color. This needs to be a valid
            [hex triplet](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet) value.
            E.g.: `#F00` or `#FF0000`
            Leave blank to keep the original color.
          type: string
          example: "#FF0000"
        footer_text:
          description: >
            A short text that will be placed in the footer of the site.
          type: string
          example: ""
        header_background:
          default: null
          example: "#1a1a1a"
          description: >
            Use this parameter to change the background color of the header. By default, the header
            is transparent. Use a HEX color (e.g. `#1a1a1a`) so that the contrast color of the
            buttons and links can be calculated.
          type: string
        highlight_color:
          description: >
            Controls the color used for certain UI elements such as progress spinner, buttons, etc.
            This needs to be a valid [hex triplet](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet) value.
            E.g.: `#F00` or `#FF0000`
            Leave blank to keep the original color.
          type: string
          example: "FF0000"
    AppConfigResourceRead:
      allOf:
        -   $ref: "#/components/schemas/ResourceRead"
        -   $ref: "#/components/schemas/AppConfigMetadata"
    AppConfigResourcesRead:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            app_configs:
              description: >
                Array with all app configs for a site
              type: array
              items:
                $ref: "#/components/schemas/AppConfigResourceRead"
    ContentTypeSchemaMetadata:
      type: object
      additionalProperties: false
      required:
        - metadata
      properties:
        metadata:
          type: object
          required:
            - display_name
            - hosting_type
            - name
            - sections
          properties:
            display_name:
              type: string
              description: Friendly name used for identifying the schema in the JWP dashboard
              example: Concert Venue
            hosting_type:
              type: string
              description: |
                Determines the hosting type a media item needs to have to be able to be associated with this Content Type

                **Possible Values**:
                 - `external`: The Content Type can be associated with externally hosted media items
                 - `hosted`: The Content Type can be associated with internally hosted media items
                 - `ott_data`: The Content Type can be associated with media items that have the `ott_data` hosting type
              enum:
                - external
                - hosted
                - ott_data
            name:
              type: string
              description: API name used for identifying the content type schema
              example: concert_venue
            sections:
              type: array
              description: |
                Array of grouped fields (sections) to display on the media details page in the JWP dashboard
                
                The order of the sections is respected in the JWP dashboard. An editor can use fields to define metadata for specific kinds of media items.
              items:
                $ref: '#/components/schemas/ContentTypeSchemasSections'
            description:
              type: string
              default: ''
              description: |
                Short description of the content type schema
                
                This value can give additional information for when to use this schema.
              example: The Concert Venue Schema allows to group Media Items (e.g. Concerts) depending on the Venue where it took place.
            is_active:
              type: boolean
              default: true
              example: true
              description: |
                Indicates if this schema can be associated with media

                 **Possible Values**:
                  - `true`: The schema can be associated with media items.
                  - `false`: The schema can no longer be associated with new media items. Media items associated with an inactive no longer display formatted form fields and revert to the default custom params input.
            is_series:
              type: boolean
              default: false
              example: false
              description: |
                Indicates if the media item associated with this schema will be treated as a series. 
                
                This setting applies only when `hosting_type` is set to `ott_data`.
    ContentTypeSchemasSections:
      type: object
      description: >
        Configuration of a single section. A section is a group of fields.
      additionalProperties: false
      required:
        - title
        - fields
      properties:
        title:
          type: string
          description: Name for the section
          example: Roku Related Fields
        fields:
          type: array
          description: |
            Fields displayed within the section on the media details page in the JWP dashboard
            
            The order of fields is respected in the JWP dashboard.
          items:
            $ref: '#/components/schemas/ContentTypeSchemasFields'
    ContentTypeSchemasFields:
      type: object
      description: >
        Definition of a single field
      additionalProperties: false
      required:
        - param
        - options
      properties:
        param:
          type: string
          example: roku-app-id
          description: |
            Name of your field shown in the API
            
            This value is used as the `key` of a custom parameter and as the name of the value seen in the Delivery API JSON playlists.
        label:
          type: string
          example: Roku App ID
          description: >
            Human-readable name for the field displayed in the JWP dashboard
        required:
          type: boolean
          example: true
          default: false
          description: >
            Determines if field is necessary
            
            **Possible Values**:
            - `false`: Metadata can be saved even when the field has not been defined.
            - `true`: If field has not been defined, metadata cannot be saved.
        details:
          additionalProperties: false
          description: >
            Unique properties per field type that determine how the field behaves in the UI.
          oneOf:
            - $ref: '#/components/schemas/ContentTypeSchemasFieldInput'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldTextarea'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldPlaylistSelect'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldMediaSelect'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldSelect'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldToggle'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldMultiSelect'
            - $ref: '#/components/schemas/ContentTypeSchemasFieldPlaylistMultiselect'
            - $ref: '#/components/schemas/ContentTypeSchemaFieldsDate'
            - $ref: '#/components/schemas/ContentTypeSchemaFieldsDateTime'
    ContentTypeSchemasFieldInput:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - input
        default:
          type: string
          description: >
            Default text to display in the input field
        inputType:
          type: string
          enum: [ email, url, number, tel ]
          description: >
            Type of input field
          example: email
        minLength:
          type: integer
          format: int32
          minimum: 1
          maximum: 7499
          description: >
            Minimum number of characters for the input
        maxLength:
          type: integer
          format: int32
          minimum: 1
          maximum: 7500
          description: >
            Maximum number of characters for the input
        placeholder:
          type: string
          example: Input a value here.
          description: >
            Brief hint to explain the kind of information expected in the field
        pattern:
          type: string
          description: >
            Regex used to validate the input of the field
          example: '[a-z0-9-]+\.(?:com|org)(?:\.[a-z]{2,3})?'
    ContentTypeSchemasFieldTextarea:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - textarea
        default:
          type: string
          description: >
            Default text to display in the text area
        minLength:
          type: integer
          format: int32
          minimum: 1
          maximum: 7499
          description: >
            Minimum number of characters for the text area
        maxLength:
          type: integer
          format: int32
          minimum: 1
          maximum: 7500
          description: >
            Maximum number of characters for the text area
        placeholder:
          type: string
          example: Input a value here.
          description: >
            Brief hint to explain the kind of information expected in the field
    ContentTypeSchemasFieldPlaylistSelect:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - playlist_select
        default:
          type: string
          minLength: 8
          maxLength: 8
          description: >
            Eight-character ID of a playlist to use as the default value
        filter:
          type: string
          example: "custom_param: \"contentType: something_new\" AND publish_date: [2017-01-01 TO 2017-04-01]"
          description: |
            Filter query string to limit the media that can be selected

            This property uses the same value format as is used for the <a href="https://docs.jwplayer.com/platform/reference/get_v2-sites-site-id-media" target="_blank">List media</a> `q` parameter.
    ContentTypeSchemasFieldMediaSelect:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - media_select
        default:
          type: string
          minLength: 8
          maxLength: 8
          description: >
            Eight-character ID of a media used as the default value
        filter:
          type: string
          example: "hosting_type: NOT other AND publish_date: [2017-01-01 TO 2017-04-01]"
          description: |
            Filter query string to limit the media that can be selected

            This property uses the same value format as is used for the <a href="https://docs.jwplayer.com/platform/reference/get_v2-sites-site-id-media" target="_blank">List media</a> `q` parameter.
    ContentTypeSchemasFieldSelect:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - select
        default:
          type: string
          description: >
            Default value to use for the select type
        options:
          type: array
          minItems: 2
          description:  |
            List of options to display in the select box
            
            A minimum of **two** items must be defined. The order of the items is respected by the UI.
          items:
            type: object
            additionalProperties: false
            required:
              - value
            properties:
              value:
                type: string
                example: value
                description: >
                  Value stored in the custom parameter associated with this field
              label:
                type: string
                example: Human-Readable Value
                description: >
                  Human-readable version of the value defined for `value`
              description:
                type: string
                example: Use this to do something.
                description: >
                  Short explanation of the result of selecting the value
        placeholder:
          type: string
          example: Select your favorite value
          description: >
            Text shown in the select box when an option has not yet been selected
    ContentTypeSchemasFieldToggle:
      type: object
      description: >
        Intended type of this field
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - toggle
        default:
          type: boolean
          description: >
            Default value to use for the toggle type
    ContentTypeSchemasFieldMultiSelect:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - multi-select
        default:
          type: string
          description: >
            Default values, separated by commas, selected for the multi-select type
        options:
          type: array
          minItems: 2
          description: |
            List of options to display in the select box
            
            A minimum of **two** items must be defined. The order of the items is respected by the UI.
          items:
            type: object
            additionalProperties: false
            required:
              - value
            properties:
              value:
                type: string
                example: value
                description: >
                  Value stored in the custom parameter associated with this field
              label:
                type: string
                example: Human-Readable Value
                description: >
                  Human-readable version of the value defined for `value`
              description:
                type: string
                example: Use this to do something.
                description: >
                  Short explanation of the result of selecting the value
        placeholder:
          type: string
          example: Select your favorite value
          description: >
            Text shown in the select box when an option has not yet been selected
    ContentTypeSchemasFieldPlaylistMultiselect:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - playlist_multiselect
        default:
          type: string
          description: >
            Default values, separated by commas, selected for the multi-select type
          example: "Ab12CD34,EF43gH21,iJKl1234"
          pattern: "^[A-Za-z0-9]{8}(?:,[A-Za-z0-9]{8})*$"
        filter:
          type: string
          example: "playlist_type: NOT manual AND title: \"My Playlist\""
          description: |
            Filter query string to limit the playlists that can be selected

            This property uses the same value format as is used for the <a href="https://docs.jwplayer.com/platform/reference/get_v2-sites-site-id-media" target="_blank">List media</a> `q` parameter.
        placeholder:
          type: string
          example: Select your favorite value
          description: >
            Text shown in the select box when an option has not yet been selected
    ContentTypeSchemaFieldsDate:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - date
    ContentTypeSchemaFieldsDateTime:
      type: object
      required:
        - field_type
      properties:
        field_type:
          type: string
          description: >
            Intended type of this field
          enum:
            - date_time
    ContentTypeSchemaResourceRead:
      allOf:
        -   $ref: "#/components/schemas/ResourceRead"
        -   $ref: "#/components/schemas/ContentTypeSchemaMetadata"
    ContentTypeSchemaResourcesRead:
      type: object
      allOf:
        -   $ref: "#/components/schemas/ResourcesRead"
        -   type: object
            properties:
              content_type_schemas:
                description: >
                  Array with all content type schemas for a site
                type: array
                items:
                  $ref: "#/components/schemas/ContentTypeSchemaResourceRead"
    # Broadcast Live
    LiveStreamId:
      description: Unique alphanumeric ID of the Broadcast live stream
      $ref: '#/components/schemas/ResourceId'
    AdditionalUrlOutput:
      type: object
      properties:
        title:
          type: string
          description: Associated title used only for display in the platform
        url:
          type: string
          description: Associated URL for the additional output, can be supplemented by a key
        key:
          type: string
          description: Associated key for the additional output, such as RTMP
    AudioDefinition:
      type: object
      properties:
        pid:
          type: integer
          description: Associated PID (Packet Identifier) for the definition
          format: int32
          nullable: true
        language:
          type: string
          description: Associated language code for the definition
          nullable: true
      additionalProperties: false
      description: An audio definition object stored in the system
    AudioDefinitionParameters:
      type: object
      properties:
        pid:
          type: integer
          description: |
            Packet identifier with a value between `32` and `8190`, excluding the reserved value `8187`

            The PID provided should be set on your source encoder to identify the language track.
          format: int32
          nullable: true
        language:
          type: string
          description: |
            Language code for the audio track
            
            This is typically ISO-639-2b but depends on the ingest format.

            Setting a language code allows you to push an audio that may not already be tagged but is otherwise identified by the PID. The resulting audio in the live stream will then be tagged with this language code.
          nullable: true
      additionalProperties: false
      description: Parameters for defining an audio track that exists in the incoming live stream
    CaptionDefinition:
      type: object
      properties:
        name:
          type: string
          description: Associated name identifier for the definition
        language:
          type: string
          description: |
           Associated language code for the definition.
           
            This is either `ISO-639-2B` or `ISO-639-2T`
        type:
          type: object
          description: |
            Associated caption type for the definition
            
            This is either `TELETEXT` or `CEA608708`
      additionalProperties: false
      description: A caption definition object stored in the system
    CaptionDefinitionParameters:
      type: object
      properties:
        name:
          type: string
          description: |
            Name identifier for the caption definition

            This is used to differentiate between caption definitions.
        language:
          type: string
          description: |
            Language code for the caption

            This is either `ISO-639-2B` or `ISO-639-2T`

            Language codes cannot be used for more than one caption definition.
        type:
          type: string
          description: |
            Specifies the type of caption

            This must be a valid supported caption type.
          enum:
              - TELETEXT
              - CEA608708
        page_number:
          type: integer
          description: |
            Specifies the teletext page number within the data stream from which to extract captions

            The range is `0x100` (256) to `0x8FF` (2303).
          format: int32
      additionalProperties: false
      description: Parameters for defining a caption track that exists in the incoming live stream
    CreateClipParameters:
      type: object
      properties:
        title:
          type: string
          description: | 
            **(DEPRECATED)** Title of the created clip

            Whilst still temporarily supported, using the value provided within the metadata object is strongly recommended.
        metadata:
          $ref: '#/components/schemas/MediaResourceMetadata'
        trim_in_point:
          type: string
          description: |
            Start point of the clip

            This value can either be a timestamp or full date+time (ISO8601 format)
        trim_out_point:
          type: string
          description: |
            End point of the clip
            
            This value can either be a timestamp or full date+time (ISO8601 format)
      required: 
        - title
        - trim_in_point
        - trim_out_point
      additionalProperties: false
      description: The parameters to create a clip from an existing Broadcast live stream
    CreateIngestPointParameters:
      type: object
      properties:
        ingest_format:
          enum:
            - rtmp
            - rtp
            - rtp_fec
            - srt
          type: string
          description: |
            Live ingest format

            Only a subset of ingest formats is supported to be used with ingest points.
        display_name:
          type: string
          description: Friendly name used for identifying the ingest point in the JWP dashboard
      required: 
        - ingest_format
        - display_name
      additionalProperties: false
      description: The parameters to create a new live ingest point
    IngestEndpoint:
      type: object
      properties:
        url:
          type: string
          description: URL for the ingest endpoint
          nullable: true
        key:
          type: string
          description: Key for the ingest endpoint
          nullable: true
      additionalProperties: false
      description: >
        An Ingest Endpoint for the live stream.
    IngestRenameParameters:
      type: object
      properties:
        display_name:
          type: string
          description: Friendly name used for identifying the ingest point in the JWP dashboard
      required:
        - display_name
      additionalProperties: false
      description: Parameters for renaming a live ingest point
    LiveIngestAvailabilityCollectionSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            items:
              $ref: '#/components/schemas/LiveIngestAvailabilityObjectSchema'
      additionalProperties: false
      description: Schema object for a collection of live ingest points availabilities
    LiveIngestAvailabilityMetadata:
      type: object
      properties:
        ingest_format:
          enum:
            - rtmp
            - rtp
            - rtp_fec
            - srt
          type: string
          description: Live ingest format
        display_name:
          type: string
          description: Friendly name used for identifying the ingest point in the JWP dashboard
        availability_status:
          enum:
            - available
            - conflicted
          type: string
          description: Availability of the ingest point
      additionalProperties: false
      description: Schema object for a live ingest points's availability metadata
    LiveIngestAvailabilityObjectSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/LiveIngestAvailabilityMetadata'
      additionalProperties: false
      description: Schema object for a live ingest point
    LiveIngestCollectionSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            items:
              $ref: '#/components/schemas/LiveIngestObjectSchema'
      additionalProperties: false
      description: Schema object for a collection of live ingest points
    LiveIngestMetadata:
      type: object
      properties:
        ingest_format:
          enum:
            - rtmp
            - rtp
            - rtp_fec
            - srt
          type: string
          description: Live ingest format
        url:
          type: string
          description: |
            The URL for the ingest location

            A live ingest provides a reusable ingest address so that many streams can be ingested at the same location over time.
        display_name:
          type: string
          description: Friendly name used for identifying the ingest point in the JWP dashboard
      additionalProperties: false
      description: Schema object for a live ingest points's metadata
    LiveIngestObjectSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/LiveIngestMetadata'
      additionalProperties: false
      description: Schema object for a live ingest point
    LiveStreamCollectionSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            items:
              $ref: '#/components/schemas/LiveStreamObjectSchema'
      additionalProperties: false
      description: Schema object for a collection of live streams
    LiveStreamMetadata:
      type: object
      properties:
        status:
          type: string
          description: The current live stream status.
          enum:
            - capturing
            - creating
            - deleting
            - destroying
            - failed
            - idle
            - ready
            - requested
            - scheduled
            - starting
            - stopped
            - stopping
            - streaming
        ingest:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/IngestEndpoint'
          description: Ingest information for the live stream.
          nullable: true
        playout:
          $ref: '#/components/schemas/LiveStreamPlayout'
        title:
          type: string
          description: |
            Title of the live stream
            
            This value matches the media object.
          nullable: true
        drm:
          type: boolean
          description: Whether or not the live stream should use DRM to protect the content
        stream_start:
          type: string
          description: Start time for the live stream
          format: date-time
          nullable: true
        stream_end:
          type: string
          description: End time of the live stream
          format: date-time
          nullable: true
      additionalProperties: false
      description: Schema object for a live stream's metadata
    LiveStreamObjectSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - type: object
          properties:
            id:
              type: string
              nullable: true
              description: Unique identifier for this resource
            type:
              type: string
              nullable: true
              description: Unique type label for this resource
            created:
              type: string
              format: date-time
              nullable: true
              description: Timestamp of when the live stream was created
            last_modified:
              type: string
              format: date-time
              nullable: true
              description: Timestamp of when the live stream was last modified
            relationships:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/RelationshipRead'
              nullable: true
              description: Related resources
            metadata:
              $ref: '#/components/schemas/LiveStreamMetadata'
            stream_type:
              enum:
                - 24/7
                - event
              type: string
              description: The type of live stream.
              nullable: true
            profile_name:
              type: string
              description: The associated Preset's name.
              nullable: true
            cluster_region:
              type: string
              description: The associated Cluster's name.
              nullable: true
            ingest_format:
              enum:
                - hls_pull
                - rtmp
                - rtp
                - rtp_fec
                - srt
                - srt_pull
                - zixi_push
              type: string
              description: The ingest format used for the live stream.
              nullable: true
            dvr_window:
              enum:
                - 30
                - 3600
                - 21600
              type: integer
              description: The DVR window set on the live stream.
            audio_definitions:
              type: array
              items:
                $ref: '#/components/schemas/AudioDefinition'
              description: >-
                Audio definitions for the live stream (i.e. language and PID
                configuration)
              nullable: true
            caption_definitions:
              type: array
              items:
                $ref: '#/components/schemas/CaptionDefinition'
              description: >-
                Caption definitions for the live stream, such as  name, language, type, and page number
                configuration)
              nullable: true
            use_legacy_ott_params:
              type: boolean
              description: >
                Whether or not the live stream is using legacy OTT parameters.

                The flag configures your Media to have the legacy VCH custom params, which may be desirable when migrating to the integrated version of Broadcast Live.
            enable_live_to_vod:
              type: boolean
              description: > 
                Whether or not the live stream has live to VOD enabled.

                With live2vod enabled, the livestream will be converted to a hosted Media at the end of the stream.
            mpd_profile:
              type: string
              description: The profile type of the DASH MPD for this live stream.
              nullable: true
            stream_warmup:
              type: integer
              description: |
                Number of minutes before `stream_start` that the stream was configured to start early
              nullable: true
              default: null
      additionalProperties: false
      description: Schema object for a live stream
    LiveStreamOptionsParameters:
      type: object
      properties:
        ingest_format:
          enum:
            - hls_pull
            - rtmp
            - rtp
            - rtp_fec
            - srt
            - srt_pull
            - zixi_push
          type: string
          description: Live stream ingest format
          default: rtmp
          nullable: true
        enable_drm:
          type: boolean
          description: Whether or not to enable DRM
          default: false
        stream_type:
          enum:
            - 24/7
            - event
          type: string
          description: Live stream type
          default: 24/7
          nullable: true
        stream_start:
          type: string
          description: |
            A start time for the live stream. Required for event type streaming.

            You may set a start time for 24/7 live streams to schedule a stream for the future.
          format: date-time
          default: null
          nullable: true
        stream_end:
          type: string
          description: An end time for the live stream. Required for event type streaming. Not applicable to 24/7 live streams.
          format: date-time
          default: null
          nullable: true
        stream_warmup:
          type: integer
          description: |
            Number of minutes before `stream_start` that the stream should start early
          default: 0
        dvr_window:
          enum:
            - 30
            - 3600
            - 21600
          type: integer
          description: DVR window duration, in seconds, for the live stream
          default: 30
        enable_live_to_vod:
          type: boolean
          description: | 
            Whether or not to enable live2vod
            
            This is not applicable to 24/7 live streams.

            With live2vod enabled, the livestream will be converted to a hosted Media at the end of the stream.
          default: false
        audio_definitions:
          type: array
          items:
            $ref: '#/components/schemas/AudioDefinitionParameters'
          description: |
            Any audio definitions for the live stream

            Providing audio definitions is essential for multi-audio live-streaming, but is otherwise not required.
          default: null
          nullable: true
        caption_definitions:
          type: array
          items:
            $ref: '#/components/schemas/CaptionDefinitionParameters'
          description: |
            Any caption definitions for the live stream
          default: null
          nullable: true
        use_legacy_ott_params:
          type: boolean
          description: Whether to set the legacy OTT properties on the associated Media object
          default: false
        source_url:
          type: string
          description: Source URL for pull type ingest formats to use as a source
          default: ''
          nullable: true
        mpd_profile:
          enum:
            - dvb-dash
            - mpeg-dash
          type: string
          description: Which MPD profile to use
          default: mpeg-dash
          nullable: true
        clipping_window:
          enum:
            - 4h
            - 6h
            - 12h
            - 24h
            - 36h
          type: string
          description: | 
            Defines the possible window (in hours) in which footage from **24/7 live streams** can be clipped
          default: 4h
        additional_outputs:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalUrlOutput'
          description: |
            Defines up to three RTMP URL objects for publishing to an additional location.
          default: null
          nullable: true
        purge_preview_content:
          type: boolean
          description: | 
            Determines whether to remove preview content from the livestream upon publishing

            **Possible values**:
            - `true`: Preview content is removed
            - `false`: Preview content is retained
          default: true
      additionalProperties: false
      description: Options for creating a new live stream
    LiveStreamPlayout:
      type: object
      properties:
        hls:
          type: string
          description: HLS URL for playout
          nullable: true
        dash:
          type: string
          description: DASH URL for playout
          nullable: true
        availability:
          type: string
          description: |
            Availability of the playout

            This can be used to signal whether public playback should commence or not.
          enum:
            - not_available
            - preview
            - available
      additionalProperties: false
      description: Live stream playout information
    SsaiConfig:
      type: object
      properties:
        ad_schedule_id:
          type: string
          description: Ad schedule ID for SSAI
          nullable: true
        live_preroll:
          type: boolean
          description: Whether to enable live pre-roll
      additionalProperties: false
      description: SSAI configuration for a live stream
    StreamAddIngestParameters:
      type: object
      properties:
        ingest_point_id:
          type: string
          description: Unique alphanumeric Id of the live ingest point
      additionalProperties: false
      description: Parameters for assigning a live ingest point to a live stream
    StreamConfigObjectSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - type: object
          properties:
            id:
              type: string
              nullable: true
              description: Unique identifier for this resource
            type:
              type: string
              nullable: true
              description: Unique type label for this resource
            created:
              type: string
              format: date-time
              nullable: true
              description: Timestamp of when the stream config was created
            last_modified:
              type: string
              format: date-time
              nullable: true
              description: Timestamp of when the stream config was last modified
            metadata:
              $ref: '#/components/schemas/StreamConfigMetadata'
    StreamConfigMetadata:
      type: object
      properties:
        name:
          type: string
          description: Name of the stream config
        description:
          type: string
          description: Description of the stream config
        options:
          $ref: '#/components/schemas/StreamConfigOptionsMetadata'
    StreamConfigOptionsMetadata:
      type: object
      properties:
        ingest_format:
          type: string
          enum:
            - hls_pull
            - rtmp
            - rtp
            - rtp_fec
            - srt
            - srt_pull
            - zixi_push
          description: Ingest format set by the config when not specified in the live stream request
          nullable: true
          default: null
        enable_drm: 
          type: boolean
          description: DRM setting applied by the config when not specified in the live stream request
          nullable: true
          default: null
        dvr_window:
          type: integer
          enum:
            - 30
            - 3600
            - 21600
          description: DVR window duration, in seconds, set by the config when not specified in the live stream request
          nullable: true
          default: null
        clipping_window:
          type: string
          enum:
            - 4h
            - 6h
            - 12h
            - 24h
            - 36h
          description: | 
            Clipping window (in hours) set by the config when not specified in the live stream request
          nullable: true
          default: null
        enable_live_to_vod:
          type: boolean
          description: Live-to-VOD setting applied by the config when not specified in the live stream request
          nullable: true
          default: null
        audio_definitions:
          type: array
          items:
            $ref: '#/components/schemas/AudioDefinitionParameters'
          description: Audio definitions set by the config when not specified in the live stream request
          nullable: true
          default: null
        use_legacy_ott_params:
          type: boolean
          description: Legacy OTT setting applied by the config when not specified in the live stream request 
          nullable: true
          default: null
        mpd_profile_type:
          type: string
          enum:
            - dvb-dash
            - mpeg-dash
          description: MPD profile type set by the config when not specified in the live stream request 
          nullable: true
          default: null
        stream_warmup:
          type: integer
          description: |
            Stream warmup value set by the config when not specified in the live stream request
          nullable: true
          default: null
        caption_definitions:
          type: array
          items:
            $ref: '#/components/schemas/CaptionDefinitionParameters'
          description: Caption definitions set by the config when not specified in the live stream request 
          nullable: true
          default: null
        #video_definitions intentionally undocumented
    StreamConfigCollectionSchema:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            items:
              $ref: '#/components/schemas/StreamConfigObjectSchema'
      additionalProperties: false
      description: Schema object for a collection of stream configs
    StreamRequestParameters:
      type: object
      properties:
        region:
          type: string
          enum: 
            - eu-west-1
            - us-east-1
          description: Region to use for live-streaming
        options:
          $ref: '#/components/schemas/LiveStreamOptionsParameters'
          default: null
        metadata:
          $ref: '#/components/schemas/MediaResourceCreateMetadata'
          default: null
        relationships:
          type: object
          properties:
            protection_rule:
              $ref: '#/components/schemas/RelationshipWrite'
          description: |
            Relationships to use when creating the associated media object
            
            See the supported relationships for the [create media endpoint](https://docs.jwplayer.com/platform/reference/post_v2-sites-site-id-media).
          default: '{}'
        ssai_config:
          $ref: '#/components/schemas/SsaiConfig'
      required:
        - region
      additionalProperties: false
      description: The request parameters for a new live stream
    StreamUpdateParameters:
      type: object
      properties:
        stream_start:
          type: string
          description: |
            Start time for the stream in ISO 8601 format
            
            **NOTE**: This value can only be changed **prior to starting the stream**.
          format: date-time
          default: null
          nullable: true
        stream_end:
          type: string
          description: |
            End time for the stream in ISO 8601 format
          
            **NOTE**: This value can only be changed **prior to stopping the stream**.
          format: date-time
          default: null
          nullable: true
        enable_live_to_vod:
          type: boolean
          description: |
            Controls if a video on demand (VOD) asset is automatically created once the live stream ends
            
            **NOTE**: This value can only be changed **prior to stopping the stream**.
          default: null
          nullable: true
      additionalProperties: false
      description: Parameters for updating a live stream
    # END Broacast Live
    AdConfigResourceRead:
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - $ref: "#/components/schemas/AdConfigMetadata"
    AdConfigResourcesRead:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            ad_configs:
              description: >
                Array with all ad configs for a site
              type: array
              items:
                $ref: "#/components/schemas/AdConfigResourceRead"
    TimingResourceRead:
      allOf:
        - $ref: "#/components/schemas/ResourceRead"
        - $ref: "#/components/schemas/TimingMetadata"
    TimingResourcesRead:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourcesRead"
        - type: object
          properties:
            timings:
              description: >
                Array with all timing sets for a media
              type: array
              items:
                $ref: "#/components/schemas/TimingResourceRead"
    AdConfigMetadata:
      type: object
      additionalProperties: false
      required:
        - metadata
      properties:
        metadata:
          type: object
          properties:
            name:
              type: string
              description: Eight-character ID of an ad config
            preroll_url:
              type: string
              description: Pre-roll ad tag URL of an ad config
            midroll_url:
              type: string
              description: Mid-roll ad tag URL of an ad config
            time_between_ads:
              type: string
              description: Default time between ads used for media items without individual timing sets
              pattern: "^(?!00:00:00:000)[0-2][0-3]:[0-5][0-9]:[0-5][0-9].[0-9]{3}$"
              example: "00:30:00.000"
    TimingMetadata:
      type: object
      additionalProperties: false
      required:
        - metadata
      properties:
        metadata:
          type: object
          properties:
            ad_timings:
              type: object
              properties:
                timings:
                  type: array
                  description: List of ad timecodes
                  maxItems: 20
                  items:
                    type: object
                    properties:
                      timecode:
                        type: string
                        description: Ad timecode 
                        pattern: "^(?!00:00:00:000)[0-2][0-3]:[0-5][0-9]:[0-5][0-9].[0-9]{3}$"
                        example: "00:00:05.345"
  securitySchemes:
    v2ApiSecret:
      description: V2 API secret used for authentication
      type: apiKey
      in: header
      name: Authorization
    uploadTokenAuth:
      description: Authentication used for multipart upload endpoints, provided when multipart upload is requested
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    TagsResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  name:
                    description: Name of the tag to be created
                    type: string
                    example: "my tag name"
    SeriesResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/SeriesResourceMetadata'
              relationships:
                $ref: '#/components/schemas/SeriesResourceRelationship'
    SeriesResourceWriteCreate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                allOf:
                  - $ref: '#/components/schemas/SeriesResourceMetadata'
                  - type: object
                    required:
                      - title
              relationships:
                $ref: '#/components/schemas/SeriesResourceRelationship'
            required:
              - metadata
    SeasonResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/SeasonResourceMetadata'
              relationships:
                $ref: '#/components/schemas/SeriesResourceRelationship'
    SeasonResourceWriteCreate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                allOf:
                  - type: object
                    required:
                      - number
                  - $ref: '#/components/schemas/SeasonResourceMetadata'

              relationships:
                $ref: '#/components/schemas/SeriesResourceRelationship'
            required:
              - metadata
              - relationships
    ThumbnailCreateBody:
      content:
        'application/json':
          schema:
            type: object
            description: Payload body used when creating a custom thumbnail resource
            required:
              - relationships
            properties:
              relationships:
                description: Specifies the relationships of the thumbnail being created to the associated media
                type: object
                required:
                  - media
                properties:
                  media:
                    description: List of media objects related to the thumbnail
                    type: array
                    minItems: 1
                    maxItems: 1
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/ResourceId'
              upload:
                type: object
                properties:
                  method:
                    description: |
                      Upload method

                      **Possible values**:
                      - `direct`: Can upload media files up to **25GB** and on a local machine

                      - `fetch`: Can upload media files up to **100GB** and hosted on another platform (**only** if using the v2 Management API)

                      - `multipart`: Can upload media files up to **100GB** and on a local machine (**only** if using the v2 Management API)
                    type: string
                    enum:
                      - direct
                      - multipart
                      - fetch
                  thumbnail_type:
                    description: |
                      Style of the thumbnail

                      **Possible values**:
                      - `static`: Non-moving image

                      - `video`: Video with a maximum duration of 10 seconds
                    type: string
                    enum:
                      - static
                      - video
                  download_url:
                    description: |
                      URL of the media to fetch

                      This is **required** for the `fetch` upload method
                  source_type:
                    description: |
                      Source of the thumbnail

                      **Possible values**:
                      * `custom_upload`: User-provided thumbnail
                      * `thumbstrip_image`: Thumbnail selected from the thumbstrip images via `video_position` or `thumbstrip_index`
                    type: string
                    enum:
                      - thumbstrip_image
                      - custom_upload
                    default: custom_upload
                  source_media_id:
                    description: |
                      ID of a media from which to create a thumbnail

                      This is **required** for the `thumbstrip_image` source type
                    type: string
                  video_position:
                    description: |
                      Video frame position in seconds from which thumbnail should be generated

                      This field is only relevant when `source_type` is set to `thumbstrip_image` and **cannot** be included if `thumbstrip_index` is included in the request.

                      Seconds can be given as a whole number only (such as `7`) or as a whole number with parts of a second (such as `7.42`). A thumbnail will be generated from the nearest frame of the video.
                    type: number
                    minimum: 0
                  thumbstrip_index:
                    description: |
                      Index of the image in the thumbnail strip to use as the video's thumbnail

                      This field is only relevant when `source_type` is set to `thumbstrip_image` and **cannot** be included if `video_position` is also included in the request.

                      Thumbnail index starts from `1`.
                    type: number
                    minimum: 1
    ThumbnailUpdateBody:
      content:
        'application/json':
          schema:
            description: Payload body used when updating a custom thumbnail resource
            type: object
            required:
              - relationships
            properties:
              relationships:
                description: Specifies the relationships of the thumbnail being created to the associated media
                type: object
                required:
                  - media
                properties:
                  media:
                    description: List of media objects related to the thumbnail
                    type: array
                    minItems: 1
                    maxItems: 1
                    items:
                      type: object
                      properties:
                        is_poster:
                          description: Boolean value indicating poster status of a thumbnail
                          type: boolean
                      required:
                        - is_poster
    PlacementResourceWrite:
      description: Resource for creating a new placement
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                allOf:
                  - $ref: '#/components/schemas/PlacementResourceMetadataCreate'
              relationships:
                type: object
                properties:
                  strategy:
                    $ref: '#/components/schemas/RelationshipWrite'
    PlacementResourceUpdate:
      description: Resource for updating a placement
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                allOf:
                  - $ref: '#/components/schemas/PlacementResourceMetadata'
              relationships:
                type: object
                properties:
                  strategy:
                    $ref: '#/components/schemas/RelationshipWrite'
    PlayerResourceWrite:
      description: Resource for creating a new player
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                allOf:
                  - $ref: '#/components/schemas/PlayerMetadata'
              relationships:
                type: object
                properties:
                  recommendations_playlist:
                    $ref: '#/components/schemas/RelationshipWrite'
                  adschedule:
                    $ref: '#/components/schemas/RelationshipWrite'
    MediaRenditionResourceWrite:
      description: Request body for creating a new media rendition. For more information about creating media renditions and templates, please contact [JW Player support](https://support.jwplayer.com/submit-support-case).
      content:
        'application/json':
          schema:
            type: object
            properties:
              relationships:
                type: object
                properties:
                  media_rendition_template:
                    $ref: '#/components/schemas/RelationshipWrite'
    MediaProtectionRuleResourceWrite:
      description: Resource for creating new media protection rules
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/MediaProtectionRuleResourceCreateMetadata'
    MediaProtectionRuleResourceUpdate:
      description: Resource for updating media protection rules
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/MediaProtectionRuleResourceUpdateMetadata'
    SiteProtectionRuleResourceUpdate:
      description: Resource for managing the site protection rule
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/SiteProtectionRuleResourceMetadata'
    LiveChannelResourceWrite:
      description: Resource for managing live channels
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/LiveChannelResourceMetadata'
              relationships:
                type: object
                properties:
                  protection_rule:
                    $ref: '#/components/schemas/RelationshipWrite'
    LiveChannelResourceUpdate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/LiveChannelResourceMetadata'
              relationships:
                type: object
                properties:
                  protection_rule:
                    $ref: '#/components/schemas/RelationshipWrite'
    LiveChannelEventClipWrite:
      description: Resource that contains all the information to clip the event
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/LivestreamEventClipMetadata'
    DRMPolicyResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/DRMPolicyMetadata'
    ManualPlaylistResourceWrite:
      description: Resource for managing a manual playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ManualPlaylistMetadata'
    DynamicPlaylistResourceWrite:
      description: Resource for managing a dynamic playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/DynamicPlaylistMetadata'
    ArticleMatchingPlaylistResourceWrite:
      description: Resource for managing an article matching playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ArticleMatchingPlaylistMetadata'
    SearchPlaylistResourceWrite:
      description: Resource for managing a search playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/SearchPlaylistMetadata'
    RecommendationsPlaylistResourceWrite:
      description: Resource for managing a recommendations playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/RecommendationsPlaylistMetadata'
    WatchlistPlaylistResourceWrite:
      description: Resource for managing a watchlist playlist
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/PlaylistMetadata'
    WebhookResourceWrite:
      description: Resource for managing the individual webhooks of an account
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/WebhookResourceMetadata'
    MediaResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/MediaResourceMetadata'
              relationships:
                type: object
                properties:
                  protection_rule:
                    $ref: '#/components/schemas/RelationshipWrite'
    MediaResourceWriteCreate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              upload:
                $ref: '#/components/schemas/MediaResourceUploadMetadata'
              metadata:
                $ref: '#/components/schemas/MediaResourceCreateMetadata'
              relationships:
                type: object
                properties:
                  protection_rule:
                    $ref: '#/components/schemas/RelationshipWrite'
    MediaReuploadBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              upload:
                $ref: '#/components/schemas/MediaResourceUploadMetadata'
    PbConfigResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/PbConfigResourceMetadata'
    AdScheduleResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/AdScheduleResourceMetadata'
    UpdateSchedulePbBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              schedule_ids:
                type: array
                description: Schedule IDs for the schedules to update
                items:
                  $ref: '#/components/schemas/ResourceId'
                minItems: 1
    ImportResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/ImportResourceWriteMetadata'
    OriginalResourceCreate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              upload:
                type: object
                properties:
                  method:
                    enum:
                      - direct
                      - multipart
                      - fetch
                  mime_type:
                    description: MIME type for the uploaded media
                    type: string
                  download_url:
                    description: URL of the media to fetch, required for the `fetch` upload method
                    type: string
              metadata:
                $ref: '#/components/schemas/OriginalMetadata'
    OriginalResourceUpdate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/OriginalMetadata'
    PlayerLogoResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              upload:
                type: object
                properties:
                  method:
                    enum:
                      - direct
                  mime_type:
                    description: MIME type for the uploaded media
                    type: string
    RemoveTagBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              tag:
                type: string
                description: Name of tag to be removed
            required:
              - tag
    RenameTagBody:
      content:
        'application/json':
          schema:
            type: object
            properties:
              original_tag:
                type: string
                description: Name of tag to be renamed
              new_tag:
                type: string
                description: >-
                  New name to apply to an existing tag

                  The `new_tag` will be applied to media and playlists with the original tag
            required:
              - original_tag
              - new_tag
    TextTrackResourceWrite:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/TextTrackMetadata'
    TextTrackResourceWriteCreate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              upload:
                type: object
                properties:
                  file_format:
                    description: |
                      Text track file format

                      This is **required** for the `direct` upload method. For `fetch` uploads, it is required when the `download_url` file type is ambiguous.
                    type: string
                    enum:
                      - srt
                      - vtt
                  auto_publish:
                    description: |
                       Whether the track is published after being uploaded

                       If `false`, the track is set to `draft` status after being successfully uploaded.
                    type: boolean
                    default: True
                  method:
                    enum:
                      - direct
                      - fetch
                    type: string
                    description: Upload process used to add a track to an account
                  mime_type:
                    type: string
                    description: |
                      Mime type of the uploaded asset

                      If `mime_type` is defined, the `mime_type` value must be used as the `Content-Type` header on the upload request. If `mime_type` is excluded, no `Content-Type` header should be present on the upload request.
                    enum:
                      - text/vtt
                      - text/plain
                  download_url:
                    description: |
                      URL of the text track to fetch

                      This is **required** for the `fetch` upload method
                required:
                  - method
              metadata:
                $ref: '#/components/schemas/TextTrackWriteMetadata'
    ImageCreateResourceWrite:
      content:
        'application/json':
          schema:
            allOf:
              - $ref: "#/components/schemas/ImageMetadata"
              - $ref: "#/components/schemas/ImageUploadMetadata"
    ImageUpdateResourceWrite:
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/ImageMetadata"
    AppConfigResourceWrite:
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/AppConfigMetadata"
    ContentTypeSchemaResourceWrite:
      content:
        'application/json':
          schema:
            $ref: "#/components/schemas/ContentTypeSchemaMetadata"
    AudioTrackResourceUpdate:
      content:
        'application/json':
          schema:
            type: object
            properties:
              metadata:
                $ref: '#/components/schemas/AudioTrackMetadata'
    AdConfigResourceWrite:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/AdConfigMetadata"
    TimingResourceWrite:
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/TimingMetadata"
  responses:
    '204':
      description: Resource successfully deleted
    '400':
      description: Invalid JSON request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '403':
      description: Action forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '404':
      description: Resource with ID supplied does not exist in account and object namespace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '405':
      description: Method is not allowed on the requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '409':
      description: Request conflicts with state of target resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '412':
      description: Pre-condition Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '422':
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
